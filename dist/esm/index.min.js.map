{"version":3,"file":"index.min.js","sources":["../../src/mask.ts","../../src/entity.ts","../../src/pool.ts","../../src/world.ts","../../src/component.ts","../../src/system.ts"],"sourcesContent":["// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nexport type Mask = Readonly<{\n  value: bigint;\n  has(n: bigint): boolean;\n  set(n: bigint): void;\n  test(n: bigint): boolean;\n  toggle(n: bigint): void;\n  toString(): string;\n  unset(n: bigint): void;\n}>;\n\nexport function combineMasks(...masks: Mask[]): Mask {\n  let n = 0n;\n  masks.forEach((mask) => n |= mask.value);\n  return createMask(n);\n}\n\nexport function createMask(n: bigint): Mask {\n  if (typeof n === 'number') n = BigInt(n);\n\n  let { mask } = { mask: 1n << n };\n\n  const getters = {\n    get value(): bigint {\n      return mask;\n    }\n  };\n\n  const has = function(n: bigint): boolean {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    return Boolean((mask & n) === mask);\n  };\n\n  const set = function(n: bigint): void {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    mask |= (1n << n);\n  };\n\n  const test = function(n: bigint): boolean {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    return Boolean((mask & (1n << n)) !== 0n);\n  };\n\n  const toggle = function(n: bigint): void {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    mask ^= (1n << n);\n  };\n\n  const toString = function(): string {\n    return mask.toString(2);\n  };\n\n  const unset = function(n: bigint): void {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    mask &= ~(1n << n);\n  };\n\n  return Object.freeze(\n    Object.assign(\n      getters,\n      {\n        has,\n        set,\n        test,\n        toggle,\n        toString,\n        unset,\n      }\n    )\n  );\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component } from './component';\nimport { createMask } from './mask';\n\nexport type Entity = Readonly<{\n  /** The entity's archetype */\n  archetype: bigint,\n  /** Array of components associated with the entity */\n  allComponents: Component<unknown>[],\n  /** The entity's id */\n  id: bigint,\n  /** Check if a component is present in an entity */\n  hasComponent(component: Component<unknown>): boolean,\n  /** @hidden */\n  _setId(id: bigint): Entity,\n  /** @hidden */\n  _addComponent(component: Component<unknown>): Entity,\n  /** @hidden */\n  _removeComponent(component: Component<unknown>): Entity,\n}>\n\n/** Create an new entity */\nexport function _createEntity(): Entity {\n  const {\n    archetype,\n    components,\n    componentObjects,\n  } = {\n    archetype: createMask(0n),\n    components: {} as Record<string, unknown>,\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    componentObjects: new Set() as Set<Component<unknown>>,\n  };\n\n  let { _id } = { _id: 0n };\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const data = Object.create(\n    { components },\n    {\n      /** @returns the entity's archetype */\n      archetype: {\n        get: function(): bigint {\n          return archetype.value;\n        }\n      },\n\n      /** @returns an array of this entity's components */\n      allComponents: {\n        get: function(): Component<unknown>[] {\n          return Array.from(componentObjects);\n        }\n      },\n\n      /** @returns the entity's id */\n      id: {\n        get: function(): bigint {\n          return _id;\n        }\n      }\n    }\n  );\n\n  /** @hidden */\n  const _setId = function(id: bigint): void {\n    _id = id;\n  };\n\n  /** @hidden */\n  const _addComponent = function<T>(component: Component<T>): void {\n    if (!components[component.name]) {\n      components[component.name] = {...component.properties};\n      archetype.set(component.id);\n      componentObjects.add(component);\n    }\n  };\n\n  /** @hidden */\n  const _removeComponent = function<T>(component: Component<T>): void {\n    if (components[component.name]) {\n      delete components[component.name];\n      archetype.unset(component.id);\n      componentObjects.delete(component);\n    }\n  };\n\n  /**\n   * Check if a component is present in the entity\n   * @param component the component or component name to test for\n   */\n  const hasComponent = function<T>(component: Component<T> | string): boolean {\n    const name = (typeof component === 'string') ? component : component.name;\n    return Boolean(components[name]);\n  };\n\n  return Object.freeze(\n    Object.assign(\n      data,\n      {\n        _setId,\n        _addComponent,\n        _removeComponent,\n        hasComponent,\n      }\n    )\n  ) as Entity;\n}","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nexport interface PoolSpec<T> {\n  initialSize?: number | bigint,\n  create: (() => T),\n  destroy: ((obj: T) => T),\n}\n\nexport interface Pool<T> {\n  get(): T,\n  release(obj: T): void,\n}\n\nexport function _createPool<T>(spec: PoolSpec<T>): Pool<T> {\n  const {\n    initialSize = 2,\n    create,\n    destroy\n  } = { ...spec };\n\n  const pool = [] as T[];\n\n  // populate pool to initial size\n  for (let i = 0; i < initialSize; i++) {\n    pool.push(create());\n  }\n\n  const get = function(): T {\n    return pool.pop() ?? create();\n  };\n\n  const release = function(obj: T): void {\n    pool.push(destroy(obj));\n  };\n\n  return Object.freeze({\n    get,\n    release,\n  });\n}","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component, ComponentSpec, WorldComponent, _createComponent } from './component';\nimport { Entity, _createEntity } from './entity';\nimport { _createPool } from './pool';\nimport { System, SystemSpec, _createSystem } from './system';\n\ninterface WorldSpec {\n  initialPoolSize?: number | bigint;\n  maxComponents?: number | bigint;\n}\n\nexport interface World {\n  archetypes: [bigint, Entity[]][],\n  components: Component<unknown>[],\n  component: Component<WorldComponent>,\n  entities: Entity[],\n  entity: Entity,\n  systems: System[],\n  createEntity(): Entity,\n  removeEntity(entity: Entity): boolean,\n  createComponent<T>(spec: ComponentSpec<T>): Component<T>,\n  removeComponent<T>(component: Component<T>): boolean,\n  addComponentsToEntity(entity: Entity, ...components: Component<unknown>[]): Entity,\n  removeComponentsFromEntity(entity: Entity, ...components: Component<unknown>[]): Entity,\n  createSystem(spec: SystemSpec, idx?: number): System,\n  removeSystem(system: System): boolean,\n  update(dt: number): void,\n  render(int: number): void,\n}\n\nexport function createWorld(spec: WorldSpec): World {\n  // world config\n  const {\n    initialPoolSize = 10,\n    maxComponents = 1024n,\n  } = { ...spec };\n\n  // constants\n  const {\n    archetypes,\n    components,\n    entities,\n    systems,\n    entityPool,\n  } = {\n    archetypes: new Map() as Map<bigint, Entity[]>,\n    components: new Map() as Map<string, Component<unknown>>,\n    entities: new Map() as Map<bigint, Entity>,\n    systems: [] as System[],\n    entityPool: _createPool({create: _createEntity, destroy: _destroyEntity, initialSize: initialPoolSize}),\n  };\n\n  // variables\n  let {\n    componentCount,\n    entityCount,\n    systemCount,\n    worldComponent,\n    worldEntity,\n  } = {\n    componentCount: 0n,\n    entityCount: 0n,\n    systemCount: 0n,\n    worldComponent: {} as Component<WorldComponent>,\n    worldEntity: {} as Entity,\n  };\n\n  /** @private **/\n  const addEntityToArchetypeArray = (entity: Entity) => {\n    const archetype = archetypes.get(entity.archetype);\n    if (!archetype) {\n      archetypes.set(entity.archetype, [entity]);\n    } else {\n      if (!archetype.includes(entity)) {\n        archetype.push(entity);\n      }\n    }\n  };\n\n  /** @private */\n  const removeEntityFromArchetypeArray = (entity: Entity) => {\n    const archetype = archetypes.get(entity.archetype);\n    const idx = archetype?.indexOf(entity);\n    if (idx !== undefined && idx > -1) {\n      archetype?.splice(idx, 1);\n    }\n  };\n\n  /** @private */\n  function _destroyEntity(entity: Entity): Entity {\n    entity._setId(-1n);\n    removeComponentsFromEntity(entity, ...entity.allComponents);\n    removeEntityFromArchetypeArray(entity);\n    return entity;\n  }\n\n  const getters = {\n    /** @returns an array of archetypes and their entities */\n    get archetypes() {\n      return Array.from(archetypes.entries());\n    },\n\n    /** @returns an array of components in the world */\n    get components() {\n      return Array.from(components.values());\n    },\n\n    /** @returns the world component */\n    get component(): Component<WorldComponent> {\n      return worldComponent;\n    },\n\n    /** @returns an array of entities in the world */\n    get entities() {\n      return Array.from(entities.values());\n    },\n\n    /** @returns the world entity */\n    get entity() {\n      return worldEntity;\n    },\n\n    /** @returns an array of systems in the world */\n    get systems() {\n      return Array.from(systems);\n    },\n  };\n\n  /**\n   * Create a new entity\n   * @returns a new entity\n   */\n  const createEntity = function(): Entity {\n    const entity = entityPool.get();\n    entity._setId(entityCount);\n    entities.set(entityCount, entity);\n    addEntityToArchetypeArray(entity);\n    ++entityCount;\n    return entity;\n  };\n\n  /**\n   * Remove an entity from the world\n   * and disassociate it from any components in the world\n   * @param entity the entity to remove\n   * @returns true if removed, false if entity not found\n   */\n  const removeEntity = function(entity: Entity): boolean {\n    const b = entities.delete(entity.id);\n    if (b) {\n      entityPool.release(entity);\n    }\n    return b;\n  };\n\n  /**\n   * Create a new component\n   * @param spec the component's specification object\n   * @returns the created component\n   */\n  const createComponent = function<T>(spec: ComponentSpec<T>): Component<T> {\n    if (maxComponents && componentCount > maxComponents) {\n      throw new Error('Maximum component count reached.');\n    }\n    const component = _createComponent({...spec, id: componentCount});\n    components.set(component.name, component);\n    ++componentCount;\n    return component;\n  };\n\n  /**\n   * Remove a component from the world\n   * and disassociate it from any entities\n   * @param component the component to remove\n   * @returns true if removed, false if component not found\n   */\n  const removeComponent = function<T>(component: Component<T>): boolean {\n    const b = components.delete(component.name);\n    if (b) {\n      component.entities.forEach((entity) => entity._removeComponent(component));\n    }\n    return b;\n  };\n\n  /**\n   * Associate components with an entity\n   * @param entity the entity to add components to\n   * @param components one or more component objects\n   */\n  const addComponentsToEntity = function(entity: Entity, ...components: Component<unknown>[]): Entity {\n    removeEntityFromArchetypeArray(entity);\n    components.forEach((component) => {\n      component._addEntity(entity);\n      entity._addComponent(component);\n    });\n    addEntityToArchetypeArray(entity);\n    return entity;\n  };\n\n  /**\n   * Disassociate components from an entity\n   * @param entity the entity to remove components from\n   * @param components one or more component objects\n   */\n  const removeComponentsFromEntity = function(entity: Entity, ...components: Component<unknown>[]): Entity {\n    removeEntityFromArchetypeArray(entity);\n    components.forEach((component) => {\n      component._removeEntity(entity);\n      entity._removeComponent(component);\n    });\n    addEntityToArchetypeArray(entity);\n    return entity;\n  };\n\n  /**\n   * Create an new system\n   * @param spec the system's specification object\n   * @param idx optional execution index (i.e. 0 gets called first);\n   * @returns the created system\n   */\n  const createSystem = function(spec: SystemSpec, idx?: number): System {\n    const system = _createSystem({...spec, id: systemCount});\n    if (idx !== undefined) {\n      systems.splice(idx, 0, system);\n    } else {\n      systems.push(system);\n    }\n    ++systemCount;\n    return system;\n  };\n\n  /**\n   * Remove a system from the world\n   * @param system the system to remove\n   * @returns true if remove, false if system not found\n   */\n  const removeSystem = function(system: System): boolean {\n    const idx = systems.indexOf(system);\n    if (idx > -1) {\n      systems.splice(idx, 1);\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Call update on all systems\n   * @param dt frame delta time\n   */\n  const update = function(dt: number): void {\n    systems.forEach((system) => {\n      if (system.enabled) {\n        /** @todo make this more efficient */\n        const entities = Array.from(archetypes.entries()).reduce((arr, [archetype, ents]) => {\n          if ((system.archetype & archetype) === system.archetype) {\n            arr.push(...ents);\n          }\n          return arr;\n        }, [] as Entity[]);\n        system.update(dt, entities);\n      }\n    });\n  };\n\n  /**\n   * Call render on all systems\n   * @param int frame interpolation\n   */\n  const render = function(int: number): void {\n    systems.forEach((system) => {\n      if (system.enabled) {\n        /** @todo make this more efficient */\n        const entities = Array.from(archetypes.entries()).reduce((arr, [archetype, ents]) => {\n          if ((system.archetype & archetype) === system.archetype) {\n            arr.push(...ents);\n          }\n          return arr;\n        }, [] as Entity[]);\n        system.render(int, entities);\n      }\n    });\n  };\n\n  // create worldEntity\n  worldEntity = createEntity();\n\n  const world: World = Object.freeze(\n    Object.assign(\n      getters,\n      {\n        createEntity,\n        removeEntity,\n        createComponent,\n        removeComponent,\n        addComponentsToEntity,\n        removeComponentsFromEntity,\n        createSystem,\n        removeSystem,\n        update,\n        render,\n      }\n    )\n  );\n\n  // worldEntity setup - ensures archetype 1n is always just the worldEntity\n  worldComponent = createComponent<WorldComponent>({\n    name: \"world\",\n    entityLimit: 1,\n    properties: {\n      world,\n    },\n  });\n  addComponentsToEntity(worldEntity, worldComponent);\n\n  return world;\n}\n\n\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Entity } from './entity';\nimport { World } from './world';\n\n/** A property specifically for the worldEntity */\nexport interface WorldComponent {\n  /** The associated world object */\n  world: World,\n}\n\n/** Component specification object */\nexport type ComponentSpec<T = Record<string, unknown>> = Omit<InternalComponentSpec<T>, \"id\">;\n\n/** Internal component specification object */\ninterface InternalComponentSpec<T = Record<string, unknown>> {\n  /** The maximum entities component can attach to */\n  entityLimit?: number | bigint | null,\n  /** The component's id */\n  id: bigint,\n  /** The component's name */\n  name: string,\n  /** The component's property object */\n  properties: T,\n}\n\nexport interface Component<T = Record<string, unknown>> {\n  /** An array of entities associated with this component */\n  entities: Entity[],\n  /** The maximum entities component can attach to */\n  entityLimit: number | bigint | null | undefined,\n  /** The component's id */\n  id: Readonly<bigint>,\n  /** The component's name */\n  name: Readonly<string>,\n  /** The component's property object */\n  properties: T,\n  /** @hidden */\n  _addEntity(entity: Entity): void,\n  /** @hidden */\n  _removeEntity(entity: Entity): void,\n  /** Check if an entity is associated with this category */\n  hasEntity(entity: Entity): boolean\n  /** Set the maximum entities component can attach to */\n  setEntityLimit(limit: number | bigint | null): void,\n}\n\n/**\n * Creates a new component object\n * @param spec the components specification object\n */\nexport function _createComponent<T = Record<string, unknown>>(spec: InternalComponentSpec<T>): Component<T> {\n  const { id, name, properties } = { ...spec };\n  let { entityLimit } = { ...spec };\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  const { entities } = { entities: new Set() as Set<Entity> };\n\n  const getters = {\n    /** @returns the component's id */\n    get id(): bigint {\n      return id;\n    },\n\n    /** @returns the component's name */\n    get name(): string {\n      return name;\n    },\n\n    /** @returns an array of entities associated with this component */\n    get entities(): Entity[] {\n      return Array.from(entities);\n    },\n\n    /** @returns the maximum entities this component can attach to */\n    get entityLimit(): number | bigint | null | undefined {\n      return entityLimit;\n    },\n\n    /** @returns the default properties of this component */\n    get properties(): T {\n      return properties;\n    }\n  };\n\n  /**\n   * @hidden\n   * Associate an entity with this component\n   * @param entity the entity to associate\n   * @returns this component\n   */\n  const _addEntity = function(entity: Entity): void {\n    if (entityLimit != null && entities.size >= entityLimit) {\n      throw new Error(`component \"${name}\" has reached its entity limit of ${entityLimit}.`);\n    }\n    entities.add(entity);\n  };\n\n  /**\n   * @hidden\n   * Disassociate an entity from this component\n   * @param entity the entity to disassociate\n   * @returns this component\n   */\n  const _removeEntity = function(entity: Entity): void {\n    entities.delete(entity);\n  };\n\n  /**\n   * Check if an entity is associated with this component\n   * @param entity the entity to test for\n   */\n  const hasEntity = function(entity: Entity): boolean {\n    return entities.has(entity);\n  };\n\n  /**\n   * Set the maximum number of entities this component can be associated with at one time\n   * @param limit the limit or null/undefined to remove the limit\n   */\n  const setEntityLimit = function(limit?: number | bigint | null): void {\n    entityLimit = limit;\n  };\n\n  return Object.freeze(\n    Object.assign(\n      getters,\n      {\n        hasEntity,\n        setEntityLimit,\n        _addEntity,\n        _removeEntity,\n      }\n    )\n  );\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component } from './component';\nimport { Entity } from './entity';\nimport { createMask } from './mask';\n\nexport type SystemSpec = Omit<InternalSystemSpec, \"id\">;\n\ninterface InternalSystemSpec {\n  /** The system's required components */\n  components?: Component<unknown>[],\n  /** The system's id */\n  id: bigint,\n  /** The system's render function */\n  renderFn?: (int: number, entities: Entity[]) => void,\n  /** The system's update function */\n  updateFn?: (dt: number, entities: Entity[]) => void,\n}\n\nexport type System = Readonly<{\n  /** The system's associated entity archetype */\n  archetype: bigint,\n  /** Is the system enabled? */\n  enabled: boolean,\n  /** The system's id */\n  id: bigint,\n  /** Disable the system */\n  disable(): void,\n  /** Enable the system */\n  enable(): void,\n  /** The system's render function */\n  render(int: number, entities: Entity[]): void,\n  /** The system's update function */\n  update(dt: number, entities: Entity[]): void,\n}>;\n\n/**\n * Creates a new system object\n * @param spec the system specification object\n */\nexport function _createSystem(spec: InternalSystemSpec): System {\n  const {\n    id,\n    components = [],\n    updateFn = (() => void 0),\n    renderFn = (() => void 0),\n  } = { ...spec };\n\n  const { archetype } = { archetype: createMask(0n) };\n  components.forEach((component) => archetype.set(component.id));\n\n  let { enabled } = { enabled: false };\n\n  const getters = {\n    /** @returns the system's archetype */\n    get archetype(): bigint {\n      return archetype.value;\n    },\n\n    /** @returns whether the system is enabled or not */\n    get enabled(): boolean {\n      return enabled;\n    },\n\n    /** @retuns the system's id */\n    get id(): bigint {\n      return id;\n    },\n  };\n\n  /** Enable the system */\n  const enable = function(): void {\n    enabled = true;\n  };\n\n  /** Disable the system */\n  const disable = function(): void {\n    enabled = false;\n  };\n\n  /** Call the system's update function */\n  const update = function(dt: number, entities: Entity[]): void {\n    updateFn(dt, entities);\n  };\n\n  /** Call the system's render function */\n  const render = function(int: number, entities: Entity[]): void {\n    renderFn(int, entities);\n  };\n\n  return Object.freeze(\n    Object.assign(\n      getters,\n      {\n        enable,\n        disable,\n        update,\n        render,\n      }\n    )\n  );\n}\n"],"names":["createMask","n","BigInt","mask","getters","value","Object","freeze","assign","has","Boolean","set","test","toggle","toString","unset","_createEntity","archetype","components","componentObjects","Set","_id","data","create","get","allComponents","Array","from","id","_setId","_addComponent","component","name","properties","add","_removeComponent","delete","hasComponent","_createPool","spec","initialSize","destroy","pool","i","push","pop","release","obj","createWorld","initialPoolSize","maxComponents","archetypes","entities","systems","entityPool","Map","_destroyEntity","entity","removeComponentsFromEntity","removeEntityFromArchetypeArray","componentCount","entityCount","systemCount","worldComponent","worldEntity","addEntityToArchetypeArray","includes","idx","indexOf","undefined","splice","entries","values","createEntity","createComponent","Error","_createComponent","entityLimit","hasEntity","setEntityLimit","limit","_addEntity","size","_removeEntity","addComponentsToEntity","forEach","world","removeEntity","b","removeComponent","createSystem","system","_createSystem","updateFn","renderFn","enabled","enable","disable","update","dt","render","int","removeSystem","reduce","arr","ents"],"mappings":"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"}