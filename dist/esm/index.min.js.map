{"version":3,"file":"index.min.js","sources":["../../src/component.ts","../../src/utils.ts","../../src/mask.ts","../../src/entity.ts","../../src/pool.ts","../../src/world.ts","../../src/system.ts"],"sourcesContent":["// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Entity } from './entity';\nimport { deepAssign } from './utils';\nimport { World } from './world';\n\n/** A property specifically for the worldEntity */\nexport interface WorldComponent {\n  /** The associated world object */\n  world: World,\n}\n\n/** Component specification object */\nexport type ComponentSpec<T = Record<string, unknown>> = Omit<InternalComponentSpec<T>, \"id\">;\n\n/** Internal component specification object */\ninterface InternalComponentSpec<T = Record<string, unknown>> {\n  /** The maximum entities component can attach to */\n  entityLimit?: number | bigint | null,\n  /** The component's id */\n  id: bigint,\n  /** The component's name */\n  name: string,\n  /** The component's property object */\n  properties: T,\n  /** Is the component removable once attached? */\n  removable?: boolean,\n}\n\nexport interface Component<T = Record<string, unknown>> {\n  /** An array of entities associated with this component */\n  entities: Entity[],\n  /** The maximum entities component can attach to */\n  entityLimit: number | bigint | null,\n  /** The component's id */\n  id: Readonly<bigint>,\n  /** The component's name */\n  name: Readonly<string>,\n  /** The component's property object */\n  properties: T,\n  /** Is the component removable once attached? */\n  removable: boolean,\n  /** @hidden */\n  _addEntity(entity: Entity): void,\n  /** @hidden */\n  _removeEntity(entity: Entity): void,\n  /** Check if an entity is associated with this category */\n  hasEntity(entity: Entity): boolean\n  /** Set the maximum entities component can attach to */\n  setEntityLimit(limit: number | bigint | null): void,\n  /** Set whether the component be removed from entities once attached */\n  setRemovable(isRemovable: boolean): void,\n}\n\n/**\n * Creates a new component object\n * @param spec the components specification object\n */\nexport function _createComponent<T = Record<string, unknown>>(spec: InternalComponentSpec<T>): Component<T> {\n  const { id, name } = { ...spec };\n\n  // deep clone properties\n  const properties = deepAssign({}, spec.properties as Record<string, unknown>);\n\n  // configurables\n  let {\n    entityLimit = null,\n    removable = true,\n  } = { ...spec };\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  const { entities } = { entities: new Set() as Set<Entity> };\n\n  const getters = {\n    /** @returns the component's id */\n    get id(): bigint {\n      return id;\n    },\n\n    /** @returns the component's name */\n    get name(): string {\n      return name;\n    },\n\n    /** @returns an array of entities associated with this component */\n    get entities(): Entity[] {\n      return Array.from(entities);\n    },\n\n    /** @returns the maximum entities this component can attach to */\n    get entityLimit(): number | bigint | null {\n      return entityLimit;\n    },\n\n    /** @returns the default properties of this component */\n    get properties(): T {\n      return properties as T;\n    },\n\n    /** @returns can the component be removed from entities once attached? */\n    get removable(): boolean {\n      return removable;\n    },\n  };\n\n  /**\n   * @hidden\n   * Associate an entity with this component\n   * @param entity the entity to associate\n   * @returns this component\n   */\n  const _addEntity = function(entity: Entity): void {\n    if (entityLimit != null && entities.size >= entityLimit) {\n      throw new Error(`component \"${name}\" has reached its entity limit of ${entityLimit}.`);\n    }\n    entities.add(entity);\n  };\n\n  /**\n   * @hidden\n   * Disassociate an entity from this component\n   * @param entity the entity to disassociate\n   * @returns this component\n   */\n  const _removeEntity = function(entity: Entity): void {\n    if (!removable) {\n      throw new Error(`component ${name} is not removable.`);\n    }\n    entities.delete(entity);\n  };\n\n  /**\n   * Check if an entity is associated with this component\n   * @param entity the entity to test for\n   */\n  const hasEntity = function(entity: Entity): boolean {\n    return entities.has(entity);\n  };\n\n  /**\n   * Set the maximum number of entities this component can be associated with at one time\n   * @param limit the limit or null to remove the limit\n   */\n  const setEntityLimit = function(limit: number | bigint | null): void {\n    entityLimit = limit;\n  };\n\n  /**\n   * Set whether the component be removed from entities once attached\n   * @param isRemovable boolean - true = removable\n   */\n  const setRemovable = function(isRemovable: boolean): void {\n    removable = isRemovable;\n  };\n\n  return Object.freeze(\n    Object.assign(\n      getters,\n      {\n        hasEntity,\n        setEntityLimit,\n        setRemovable,\n        _addEntity,\n        _removeEntity,\n      }\n    )\n  );\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\n/** @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign */\nexport function deepAssign(\n    target: Record<string | number | symbol, unknown>,\n    ...sources: Record<string | number | symbol, unknown>[]\n  ): Record<string | number | symbol, unknown> {\n    sources.forEach(source => {\n      const descriptors = Object.keys(source).reduce((descriptors, key) => {\n        const desc = Object.getOwnPropertyDescriptor(source, key);\n        if (desc !== undefined) {\n          descriptors[key] = desc;\n        }\n        return descriptors;\n      }, {} as Record<string | number | symbol, PropertyDescriptor>);\n\n      Object.getOwnPropertySymbols(source).forEach(sym => {\n        const descriptor = Object.getOwnPropertyDescriptor(source, sym);\n        if (descriptor?.enumerable) {\n          descriptors[sym as unknown as string] = descriptor;\n        }\n      });\n      Object.defineProperties(target, descriptors);\n    });\n    return target;\n}","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nexport type Mask = Readonly<{\n  value: bigint;\n  has(n: bigint): boolean;\n  set(n: bigint): void;\n  test(n: bigint): boolean;\n  toggle(n: bigint): void;\n  toString(): string;\n  unset(n: bigint): void;\n}>;\n\nexport function combineMasks(...masks: Mask[]): Mask {\n  let n = 0n;\n  masks.forEach((mask) => n |= mask.value);\n  return createMask(n);\n}\n\nexport function createMask(n: bigint): Mask {\n  if (typeof n === 'number') n = BigInt(n);\n\n  let { mask } = { mask: 1n << n };\n\n  const getters = {\n    get value(): bigint {\n      return mask;\n    }\n  };\n\n  const has = function(n: bigint): boolean {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    return Boolean((mask & n) === mask);\n  };\n\n  const set = function(n: bigint): void {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    mask |= (1n << n);\n  };\n\n  const test = function(n: bigint): boolean {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    return Boolean((mask & (1n << n)) !== 0n);\n  };\n\n  const toggle = function(n: bigint): void {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    mask ^= (1n << n);\n  };\n\n  const toString = function(): string {\n    return mask.toString(2);\n  };\n\n  const unset = function(n: bigint): void {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    mask &= ~(1n << n);\n  };\n\n  return Object.freeze(\n    Object.assign(\n      getters,\n      {\n        has,\n        set,\n        test,\n        toggle,\n        toString,\n        unset,\n      }\n    )\n  );\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component } from './component';\nimport { createMask } from './mask';\n\nexport type Entity = Readonly<{\n  /** The entity's archetype */\n  archetype: bigint,\n  /** Array of components associated with the entity */\n  allComponents: Component<unknown>[],\n  /** The entity's id */\n  id: bigint,\n  /** Check if a component is present in an entity */\n  hasComponent(component: Component<unknown>): boolean,\n  /** @hidden */\n  _setId(id: bigint): Entity,\n  /** @hidden */\n  _addComponent(component: Component<unknown>): Entity,\n  /** @hidden */\n  _removeComponent(component: Component<unknown>): Entity,\n}>\n\n/** Create an new entity */\nexport function _createEntity(): Entity {\n  const {\n    archetype,\n    components,\n    componentObjects,\n  } = {\n    archetype: createMask(0n),\n    components: {} as Record<string, unknown>,\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    componentObjects: new Set() as Set<Component<unknown>>,\n  };\n\n  let { _id } = { _id: 0n };\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const data = Object.create(\n    { components },\n    {\n      /** @returns the entity's archetype */\n      archetype: {\n        get: function(): bigint {\n          return archetype.value;\n        }\n      },\n\n      /** @returns an array of this entity's components */\n      allComponents: {\n        get: function(): Component<unknown>[] {\n          return Array.from(componentObjects);\n        }\n      },\n\n      /** @returns the entity's id */\n      id: {\n        get: function(): bigint {\n          return _id;\n        }\n      }\n    }\n  );\n\n  /** @hidden */\n  const _setId = function(id: bigint): void {\n    _id = id;\n  };\n\n  /** @hidden */\n  const _addComponent = function<T>(component: Component<T>): void {\n    if (!components[component.name]) {\n      components[component.name] = {...component.properties};\n      archetype.set(component.id);\n      componentObjects.add(component);\n    }\n  };\n\n  /** @hidden */\n  const _removeComponent = function<T>(component: Component<T>): void {\n    if (components[component.name]) {\n      delete components[component.name];\n      archetype.unset(component.id);\n      componentObjects.delete(component);\n    }\n  };\n\n  /**\n   * Check if a component is present in the entity\n   * @param component the component or component name to test for\n   */\n  const hasComponent = function<T>(component: Component<T> | string): boolean {\n    const name = (typeof component === 'string') ? component : component.name;\n    return Boolean(components[name]);\n  };\n\n  return Object.freeze(\n    Object.assign(\n      data,\n      {\n        _setId,\n        _addComponent,\n        _removeComponent,\n        hasComponent,\n      }\n    )\n  ) as Entity;\n}","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nexport interface PoolSpec<T> {\n  initialSize?: number | bigint,\n  create: (() => T),\n  destroy: ((obj: T) => T),\n}\n\nexport interface Pool<T> {\n  get(): T,\n  release(obj: T): void,\n}\n\nexport function _createPool<T>(spec: PoolSpec<T>): Pool<T> {\n  const {\n    initialSize = 2,\n    create,\n    destroy\n  } = { ...spec };\n\n  const pool = [] as T[];\n\n  // populate pool to initial size\n  for (let i = 0; i < initialSize; i++) {\n    pool.push(create());\n  }\n\n  const get = function(): T {\n    return pool.pop() ?? create();\n  };\n\n  const release = function(obj: T): void {\n    pool.push(destroy(obj));\n  };\n\n  return Object.freeze({\n    get,\n    release,\n  });\n}","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component, ComponentSpec, WorldComponent, _createComponent } from './component';\nimport { Entity, _createEntity } from './entity';\nimport { _createPool } from './pool';\nimport { System, SystemSpec, _createSystem } from './system';\n\ninterface WorldSpec {\n  initialPoolSize?: number | bigint;\n  maxComponents?: number | bigint;\n}\n\nexport interface World {\n  archetypes: [bigint, Set<Entity>][],\n  components: Component<unknown>[],\n  component: Component<WorldComponent>,\n  entities: Entity[],\n  entity: Entity,\n  systems: System[],\n  createEntity(): Entity,\n  removeEntity(entity: Entity): boolean,\n  createComponent<T>(spec: ComponentSpec<T>): Component<T>,\n  removeComponent<T>(component: Component<T>): boolean,\n  addComponentsToEntity(entity: Entity, ...components: Component<unknown>[]): Entity,\n  removeComponentsFromEntity(entity: Entity, ...components: Component<unknown>[]): Entity,\n  createSystem(spec: SystemSpec, idx?: number): System,\n  removeSystem(system: System): boolean,\n  update(dt: number): void,\n  render(int: number): void,\n}\n\nexport function createWorld(spec: WorldSpec): World {\n  // world config\n  const {\n    initialPoolSize = 10,\n    maxComponents = 1024n,\n  } = { ...spec };\n\n  // constants\n  const {\n    archetypes,\n    components,\n    entities,\n    systems,\n    entityPool,\n  } = {\n    archetypes: new Map() as Map<bigint, Set<Entity>>,\n    components: new Map() as Map<string, Component<unknown>>,\n    entities: new Map() as Map<bigint, Entity>,\n    systems: [] as System[],\n    entityPool: _createPool({create: _createEntity, destroy: _destroyEntity, initialSize: initialPoolSize}),\n  };\n\n  // variables\n  let {\n    componentCount,\n    entityCount,\n    systemCount,\n    worldComponent,\n    worldEntity,\n  } = {\n    componentCount: 0n,\n    entityCount: 0n,\n    systemCount: 0n,\n    worldComponent: {} as Component<WorldComponent>,\n    worldEntity: {} as Entity,\n  };\n\n  /** @private **/\n  const addEntityToArchetypeArray = (entity: Entity) => {\n    if (archetypes.get(entity.archetype) === undefined) {\n      archetypes.set(entity.archetype, new Set());\n    }\n    archetypes.get(entity.archetype)?.add(entity);\n  };\n\n  /** @private */\n  const removeEntityFromArchetypeArray = (entity: Entity) => {\n    archetypes.get(entity.archetype)?.delete(entity);\n  };\n\n  /** @private */\n  function _destroyEntity(entity: Entity): Entity {\n    entity._setId(-1n);\n    removeComponentsFromEntity(entity, ...entity.allComponents);\n    removeEntityFromArchetypeArray(entity);\n    return entity;\n  }\n\n  const getters = {\n    /** @returns an array of archetypes and their entities */\n    get archetypes() {\n      return Array.from(archetypes.entries());\n    },\n\n    /** @returns an array of components in the world */\n    get components() {\n      return Array.from(components.values());\n    },\n\n    /** @returns the world component */\n    get component(): Component<WorldComponent> {\n      return worldComponent;\n    },\n\n    /** @returns an array of entities in the world */\n    get entities() {\n      return Array.from(entities.values());\n    },\n\n    /** @returns the world entity */\n    get entity() {\n      return worldEntity;\n    },\n\n    /** @returns an array of systems in the world */\n    get systems() {\n      return Array.from(systems);\n    },\n  };\n\n  /**\n   * Create a new entity\n   * @returns a new entity\n   */\n  const createEntity = function(): Entity {\n    const entity = entityPool.get();\n    entity._setId(entityCount);\n    entities.set(entityCount, entity);\n    addEntityToArchetypeArray(entity);\n    ++entityCount;\n    return entity;\n  };\n\n  /**\n   * Remove an entity from the world\n   * and disassociate it from any components in the world\n   * @param entity the entity to remove\n   * @returns true if removed, false if entity not found\n   */\n  const removeEntity = function(entity: Entity): boolean {\n    const b = entities.delete(entity.id);\n    if (b) {\n      entityPool.release(entity);\n    }\n    return b;\n  };\n\n  /**\n   * Create a new component\n   * @param spec the component's specification object\n   * @returns the created component\n   */\n  const createComponent = function<T>(spec: ComponentSpec<T>): Component<T> {\n    if (maxComponents && componentCount > maxComponents) {\n      throw new Error('Maximum component count reached.');\n    }\n    const component = _createComponent({...spec, id: componentCount});\n    components.set(component.name, component);\n    ++componentCount;\n    return component;\n  };\n\n  /**\n   * Remove a component from the world\n   * and disassociate it from any entities\n   * @param component the component to remove\n   * @returns true if removed, false if component not found\n   */\n  const removeComponent = function<T>(component: Component<T>): boolean {\n    const b = components.delete(component.name);\n    if (b) {\n      component.entities.forEach((entity) => removeComponentsFromEntity(entity, component));\n    }\n    return b;\n  };\n\n  /**\n   * Associate components with an entity\n   * @param entity the entity to add components to\n   * @param components one or more component objects\n   */\n  const addComponentsToEntity = function(entity: Entity, ...components: Component<unknown>[]): Entity {\n    removeEntityFromArchetypeArray(entity);\n    components.forEach((component) => {\n      component._addEntity(entity);\n      entity._addComponent(component);\n    });\n    addEntityToArchetypeArray(entity);\n    return entity;\n  };\n\n  /**\n   * Disassociate components from an entity\n   * @param entity the entity to remove components from\n   * @param components one or more component objects\n   */\n  const removeComponentsFromEntity = function(entity: Entity, ...components: Component<unknown>[]): Entity {\n    removeEntityFromArchetypeArray(entity);\n    components.forEach((component) => {\n      component._removeEntity(entity);\n      entity._removeComponent(component);\n    });\n    addEntityToArchetypeArray(entity);\n    return entity;\n  };\n\n  /**\n   * Create an new system\n   * @param spec the system's specification object\n   * @param idx optional execution index (i.e. 0 gets called first);\n   * @returns the created system\n   */\n  const createSystem = function(spec: SystemSpec, idx?: number): System {\n    const system = _createSystem({...spec, id: systemCount});\n    if (idx !== undefined) {\n      systems.splice(idx, 0, system);\n    } else {\n      systems.push(system);\n    }\n    ++systemCount;\n    return system;\n  };\n\n  /**\n   * Remove a system from the world\n   * @param system the system to remove\n   * @returns true if remove, false if system not found\n   */\n  const removeSystem = function(system: System): boolean {\n    const idx = systems.indexOf(system);\n    if (idx > -1) {\n      systems.splice(idx, 1);\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Call update on all systems\n   * @param dt frame delta time\n   */\n  const update = function(dt: number): void {\n    // for loops might be out of fashion,\n    // but they're much faster than reduce\n    const acs = Array.from(archetypes.entries());\n    const aLen = acs.length - 1;\n    const sLen = systems.length - 1;\n    const entities = [] as Entity[];\n    for (let i = sLen; i >= 0; i--) {\n      const system = systems[i];\n      if (system.enabled === false) continue;\n      for (let j = aLen; j >= 0; j--) {\n        const [arch, ents] = acs[j];\n        if ((system.archetype & arch) === system.archetype) {\n          entities.push(...ents);\n        }\n      }\n      system.update(dt, entities);\n      entities.length = 0;\n    }\n  };\n\n  /**\n   * Call render on all systems\n   * @param int frame interpolation\n   */\n  const render = function(int: number): void {\n    // for loops might be out of fashion,\n    // but they're much faster than reduce\n    const acs = Array.from(archetypes.entries());\n    const aLen = acs.length - 1;\n    const sLen = systems.length - 1;\n    const entities = [] as Entity[];\n    for (let i = sLen; i >= 0; i--) {\n      const system = systems[i];\n      if (system.enabled === false) continue;\n      for (let j = aLen; j >= 0; j--) {\n        const [arch, ents] = acs[j];\n        if ((system.archetype & arch) === system.archetype) {\n          entities.push(...ents);\n        }\n      }\n      system.render(int, entities);\n      entities.length = 0;\n    }\n  };\n\n  // create worldEntity\n  worldEntity = createEntity();\n\n  const world: World = Object.freeze(\n    Object.assign(\n      getters,\n      {\n        createEntity,\n        removeEntity,\n        createComponent,\n        removeComponent,\n        addComponentsToEntity,\n        removeComponentsFromEntity,\n        createSystem,\n        removeSystem,\n        update,\n        render,\n      }\n    )\n  );\n\n  // worldEntity setup - ensures archetype 1n is always just the worldEntity\n  worldComponent = createComponent<WorldComponent>({\n    name: \"world\",\n    entityLimit: 1,\n    removable: false,\n    properties: {\n      world,\n    },\n  });\n  addComponentsToEntity(worldEntity, worldComponent);\n\n  return world;\n}\n\n\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component } from './component';\nimport { Entity } from './entity';\nimport { createMask } from './mask';\n\nexport type SystemSpec = Omit<InternalSystemSpec, \"id\">;\n\ninterface InternalSystemSpec {\n  /** The system's required components */\n  components?: Component<unknown>[],\n  /** The system's id */\n  id: bigint,\n  /** The system's render function */\n  renderFn?: (int: number, entities: Entity[]) => void,\n  /** The system's update function */\n  updateFn?: (dt: number, entities: Entity[]) => void,\n}\n\nexport type System = Readonly<{\n  /** The system's associated entity archetype */\n  archetype: bigint,\n  /** Is the system enabled? */\n  enabled: boolean,\n  /** The system's id */\n  id: bigint,\n  /** Disable the system */\n  disable(): void,\n  /** Enable the system */\n  enable(): void,\n  /** The system's render function */\n  render(int: number, entities: Entity[]): void,\n  /** The system's update function */\n  update(dt: number, entities: Entity[]): void,\n}>;\n\n/**\n * Creates a new system object\n * @param spec the system specification object\n */\nexport function _createSystem(spec: InternalSystemSpec): System {\n  const {\n    id,\n    components = [],\n    updateFn = (() => void 0),\n    renderFn = (() => void 0),\n  } = { ...spec };\n\n  const { archetype } = { archetype: createMask(0n) };\n  components.forEach((component) => archetype.set(component.id));\n\n  let { enabled } = { enabled: false };\n\n  const getters = {\n    /** @returns the system's archetype */\n    get archetype(): bigint {\n      return archetype.value;\n    },\n\n    /** @returns whether the system is enabled or not */\n    get enabled(): boolean {\n      return enabled;\n    },\n\n    /** @retuns the system's id */\n    get id(): bigint {\n      return id;\n    },\n  };\n\n  /** Enable the system */\n  const enable = function(): void {\n    enabled = true;\n  };\n\n  /** Disable the system */\n  const disable = function(): void {\n    enabled = false;\n  };\n\n  /** Call the system's update function */\n  const update = function(dt: number, entities: Entity[]): void {\n    updateFn(dt, entities);\n  };\n\n  /** Call the system's render function */\n  const render = function(int: number, entities: Entity[]): void {\n    renderFn(int, entities);\n  };\n\n  return Object.freeze(\n    Object.assign(\n      getters,\n      {\n        enable,\n        disable,\n        update,\n        render,\n      }\n    )\n  );\n}\n"],"names":["_createComponent","spec","id","name","properties","deepAssign","target","sources","forEach","source","descriptors","Object","keys","reduce","key","desc","getOwnPropertyDescriptor","undefined","getOwnPropertySymbols","sym","descriptor","enumerable","defineProperties","entityLimit","removable","entities","Set","getters","Array","from","freeze","assign","hasEntity","entity","has","setEntityLimit","limit","setRemovable","isRemovable","_addEntity","size","Error","add","_removeEntity","delete","createMask","n","BigInt","mask","value","Boolean","set","test","toggle","toString","unset","_createEntity","archetype","components","componentObjects","_id","data","create","get","allComponents","_setId","_addComponent","component","_removeComponent","hasComponent","_createPool","initialSize","destroy","pool","i","push","pop","release","obj","createWorld","initialPoolSize","maxComponents","archetypes","systems","entityPool","Map","_destroyEntity","removeComponentsFromEntity","removeEntityFromArchetypeArray","componentCount","entityCount","systemCount","worldComponent","worldEntity","addEntityToArchetypeArray","entries","values","createEntity","createComponent","addComponentsToEntity","world","removeEntity","b","removeComponent","createSystem","idx","system","_createSystem","updateFn","renderFn","enabled","enable","disable","update","dt","render","int","splice","removeSystem","indexOf","acs","aLen","length","j","arch","ents"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;SA2DgBA,iBAA8CC,GAC5D,MAAMC,GAAEA,EAAEC,KAAEA,GAAS,IAAKF,GAGpBG,WC3DQC,WACZC,KACGC,GAmBH,OAjBAA,EAAQC,SAAQC,IACd,MAAMC,EAAcC,OAAOC,KAAKH,GAAQI,QAAO,CAACH,EAAaI,KAC3D,MAAMC,EAAOJ,OAAOK,yBAAyBP,EAAQK,GAIrD,YAHaG,IAATF,IACFL,EAAYI,GAAOC,GAEdL,IACN,IAEHC,OAAOO,sBAAsBT,GAAQD,SAAQW,IAC3C,MAAMC,EAAaT,OAAOK,yBAAyBP,EAAQU,GACvDC,GAAYC,aACdX,EAAYS,GAA4BC,MAG5CT,OAAOW,iBAAiBhB,EAAQI,MAE3BJ,EDsCUD,CAAW,GAAIJ,EAAKG,YAGvC,IAAImB,YACFA,EAAc,KAAIC,UAClBA,GAAY,GACV,IAAKvB,GAGT,MAAMwB,SAAEA,GAAa,CAAEA,SAAU,IAAIC,KAE/BC,EAAU,CAEdzB,SACE,OAAOA,GAITC,WACE,OAAOA,GAITsB,eACE,OAAOG,MAAMC,KAAKJ,IAIpBF,kBACE,OAAOA,GAITnB,iBACE,OAAOA,GAIToB,gBACE,OAAOA,IAsDX,OAAOb,OAAOmB,OACZnB,OAAOoB,OACLJ,EACA,CACEK,UAxBY,SAASC,GACzB,OAAOR,EAASS,IAAID,IAwBhBE,eAjBiB,SAASC,GAC9Bb,EAAca,GAiBVC,aAVe,SAASC,GAC5Bd,EAAYc,GAURC,WAnDa,SAASN,GAC1B,GAAmB,MAAfV,GAAuBE,EAASe,MAAQjB,EAC1C,MAAM,IAAIkB,MAAM,cAActC,sCAAyCoB,MAEzEE,EAASiB,IAAIT,IAgDTU,cAvCgB,SAASV,GAC7B,IAAKT,EACH,MAAM,IAAIiB,MAAM,aAAatC,uBAE/BsB,EAASmB,OAAOX,gBE9GJY,WAAWC,GACR,iBAANA,IAAgBA,EAAIC,OAAOD,IAEtC,IAAIE,KAAEA,GAAS,CAAEA,KAAM,IAAMF,GAE7B,MAAMnB,EAAU,CACdsB,YACE,OAAOD,IA2CX,OAAOrC,OAAOmB,OACZnB,OAAOoB,OACLJ,EACA,CACEO,IA3CM,SAASY,GAInB,MAHiB,iBAANA,IACTA,EAAIC,OAAOD,IAENI,SAASF,EAAOF,KAAOE,IAwC1BG,IArCM,SAASL,GACF,iBAANA,IACTA,EAAIC,OAAOD,IAEbE,GAAS,IAAMF,GAkCXM,KA/BO,SAASN,GAIpB,MAHiB,iBAANA,IACTA,EAAIC,OAAOD,IAENI,QAA+B,MAAtBF,EAAQ,IAAMF,KA4B1BO,OAzBS,SAASP,GACL,iBAANA,IACTA,EAAIC,OAAOD,IAEbE,GAAS,IAAMF,GAsBXQ,SAnBW,WACf,OAAON,EAAKM,SAAS,IAmBjBC,MAhBQ,SAAST,GACJ,iBAANA,IACTA,EAAIC,OAAOD,IAEbE,KAAU,IAAMF,gBC1CJU,gBACd,MAAMC,UACJA,EAASC,WACTA,EAAUC,iBACVA,GACE,CACFF,UAAWZ,WAAW,IACtBa,WAAY,GAEZC,iBAAkB,IAAIjC,KAGxB,IAAIkC,IAAEA,GAAQ,CAAEA,IAAK,IAGrB,MAAMC,EAAOlD,OAAOmD,OAClB,CAAEJ,WAAAA,GACF,CAEED,UAAW,CACTM,IAAK,WACH,OAAON,EAAUR,QAKrBe,cAAe,CACbD,IAAK,WACH,OAAOnC,MAAMC,KAAK8B,KAKtBzD,GAAI,CACF6D,IAAK,WACH,OAAOH,MAsCf,OAAOjD,OAAOmB,OACZnB,OAAOoB,OACL8B,EACA,CACEI,OAnCS,SAAS/D,GACtB0D,EAAM1D,GAmCFgE,cA/BgB,SAAYC,GAC3BT,EAAWS,EAAUhE,QACxBuD,EAAWS,EAAUhE,MAAQ,IAAIgE,EAAU/D,YAC3CqD,EAAUN,IAAIgB,EAAUjE,IACxByD,EAAiBjB,IAAIyB,KA4BnBC,iBAvBmB,SAAYD,GAC/BT,EAAWS,EAAUhE,eAChBuD,EAAWS,EAAUhE,MAC5BsD,EAAUF,MAAMY,EAAUjE,IAC1ByD,EAAiBf,OAAOuB,KAoBtBE,aAZe,SAAYF,GAC/B,MAAMhE,EAA6B,iBAAdgE,EAA0BA,EAAYA,EAAUhE,KACrE,OAAO+C,QAAQQ,EAAWvD,iBChFdmE,YAAerE,GAC7B,MAAMsE,YACJA,EAAc,EAACT,OACfA,EAAMU,QACNA,GACE,IAAKvE,GAEHwE,EAAO,GAGb,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAaG,IAC/BD,EAAKE,KAAKb,KAWZ,OAAOnD,OAAOmB,OAAO,CACnBiC,IATU,WACV,OAAOU,EAAKG,OAASd,KASrBe,QANc,SAASC,GACvBL,EAAKE,KAAKH,EAAQM,gBCDNC,YAAY9E,GAE1B,MAAM+E,gBACJA,EAAkB,GAAEC,cACpBA,EAAgB,OACd,IAAKhF,IAGHiF,WACJA,EAAUxB,WACVA,EAAUjC,SACVA,EAAQ0D,QACRA,EAAOC,WACPA,GACE,CACFF,WAAY,IAAIG,IAChB3B,WAAY,IAAI2B,IAChB5D,SAAU,IAAI4D,IACdF,QAAS,GACTC,WAAYd,YAAY,CAACR,OAAQN,cAAegB,QAgClD,SAASc,eAAerD,GAItB,OAHAA,EAAOgC,QAAQ,IACfsB,2BAA2BtD,KAAWA,EAAO+B,eAC7CwB,+BAA+BvD,GACxBA,GApCkEsC,YAAaS,KAIxF,IAAIS,eACFA,EAAcC,YACdA,EAAWC,YACXA,EAAWC,eACXA,EAAcC,YACdA,GACE,CACFJ,eAAgB,GAChBC,YAAa,GACbC,YAAa,GACbC,eAAgB,GAChBC,YAAa,IAIf,MAAMC,0BAA6B7D,SACQhB,IAArCiE,EAAWnB,IAAI9B,EAAOwB,YACxByB,EAAW/B,IAAIlB,EAAOwB,UAAW,IAAI/B,KAEvCwD,EAAWnB,IAAI9B,EAAOwB,YAAYf,IAAIT,IAIlCuD,+BAAkCvD,IACtCiD,EAAWnB,IAAI9B,EAAOwB,YAAYb,OAAOX,IAW3C,MAAMN,EAAU,CAEduD,iBACE,OAAOtD,MAAMC,KAAKqD,EAAWa,YAI/BrC,iBACE,OAAO9B,MAAMC,KAAK6B,EAAWsC,WAI/B7B,gBACE,OAAOyB,GAITnE,eACE,OAAOG,MAAMC,KAAKJ,EAASuE,WAI7B/D,aACE,OAAO4D,GAITV,cACE,OAAOvD,MAAMC,KAAKsD,KAQhBc,aAAe,WACnB,MAAMhE,EAASmD,EAAWrB,MAK1B,OAJA9B,EAAOgC,OAAOyB,GACdjE,EAAS0B,IAAIuC,EAAazD,GAC1B6D,0BAA0B7D,KACxByD,EACKzD,GAsBHiE,gBAAkB,SAAYjG,GAClC,GAAIgF,GAAiBQ,EAAiBR,EACpC,MAAM,IAAIxC,MAAM,oCAElB,MAAM0B,EAAYnE,iBAAiB,IAAIC,EAAMC,GAAIuF,IAGjD,OAFA/B,EAAWP,IAAIgB,EAAUhE,KAAMgE,KAC7BsB,EACKtB,GAsBHgC,sBAAwB,SAASlE,KAAmByB,GAOxD,OANA8B,+BAA+BvD,GAC/ByB,EAAWlD,SAAS2D,IAClBA,EAAU5B,WAAWN,GACrBA,EAAOiC,cAAcC,MAEvB2B,0BAA0B7D,GACnBA,GAQHsD,2BAA6B,SAAStD,KAAmByB,GAO7D,OANA8B,+BAA+BvD,GAC/ByB,EAAWlD,SAAS2D,IAClBA,EAAUxB,cAAcV,GACxBA,EAAOmC,iBAAiBD,MAE1B2B,0BAA0B7D,GACnBA,GAqFT4D,EAAcI,eAEd,MAAMG,EAAezF,OAAOmB,OAC1BnB,OAAOoB,OACLJ,EACA,CACEsE,aACAI,aA5Je,SAASpE,GAC5B,MAAMqE,EAAI7E,EAASmB,OAAOX,EAAO/B,IAIjC,OAHIoG,GACFlB,EAAWP,QAAQ5C,GAEdqE,GAwJHJ,gBACAK,gBAjIkB,SAAYpC,GAClC,MAAMmC,EAAI5C,EAAWd,OAAOuB,EAAUhE,MAItC,OAHImG,GACFnC,EAAU1C,SAASjB,SAASyB,GAAWsD,2BAA2BtD,EAAQkC,KAErEmC,GA6HHH,sBACAZ,2BACAiB,aAxFe,SAASvG,EAAkBwG,GAC9C,MAAMC,WC9KMC,cAAc1G,GAC5B,MAAMC,GACJA,EAAEwD,WACFA,EAAa,GAAEkD,SACfA,WAAyBC,SACzBA,YACE,IAAK5G,IAEHwD,UAAEA,GAAc,CAAEA,UAAWZ,WAAW,KAC9Ca,EAAWlD,SAAS2D,GAAcV,EAAUN,IAAIgB,EAAUjE,MAE1D,IAAI4G,QAAEA,GAAY,CAAEA,SAAS,GAE7B,MAAMnF,EAAU,CAEd8B,gBACE,OAAOA,EAAUR,OAInB6D,cACE,OAAOA,GAIT5G,SACE,OAAOA,IAwBX,OAAOS,OAAOmB,OACZnB,OAAOoB,OACLJ,EACA,CACEoF,OAvBS,WACbD,GAAU,GAuBNE,QAnBU,WACdF,GAAU,GAmBNG,OAfS,SAASC,EAAYzF,GAClCmF,EAASM,EAAIzF,IAeT0F,OAXS,SAASC,EAAa3F,GACnCoF,EAASO,EAAK3F,OD+HCkF,CAAc,IAAI1G,EAAMC,GAAIyF,IAO3C,YANY1E,IAARwF,EACFtB,EAAQkC,OAAOZ,EAAK,EAAGC,GAEvBvB,EAAQR,KAAK+B,KAEbf,EACKe,GAiFHY,aAzEe,SAASZ,GAC5B,MAAMD,EAAMtB,EAAQoC,QAAQb,GAC5B,OAAID,GAAO,IACTtB,EAAQkC,OAAOZ,EAAK,IACb,IAsELQ,OA7DS,SAASC,GAGtB,MAAMM,EAAM5F,MAAMC,KAAKqD,EAAWa,WAC5B0B,EAAOD,EAAIE,OAAS,EAEpBjG,EAAW,GACjB,IAAK,IAAIiD,EAFIS,EAAQuC,OAAS,EAEXhD,GAAK,EAAGA,IAAK,CAC9B,MAAMgC,EAASvB,EAAQT,GACvB,IAAuB,IAAnBgC,EAAOI,QAAX,CACA,IAAK,IAAIa,EAAIF,EAAME,GAAK,EAAGA,IAAK,CAC9B,MAAOC,EAAMC,GAAQL,EAAIG,IACpBjB,EAAOjD,UAAYmE,KAAUlB,EAAOjD,WACvChC,EAASkD,QAAQkD,GAGrBnB,EAAOO,OAAOC,EAAIzF,GAClBA,EAASiG,OAAS,KA6ChBP,OArCS,SAASC,GAGtB,MAAMI,EAAM5F,MAAMC,KAAKqD,EAAWa,WAC5B0B,EAAOD,EAAIE,OAAS,EAEpBjG,EAAW,GACjB,IAAK,IAAIiD,EAFIS,EAAQuC,OAAS,EAEXhD,GAAK,EAAGA,IAAK,CAC9B,MAAMgC,EAASvB,EAAQT,GACvB,IAAuB,IAAnBgC,EAAOI,QAAX,CACA,IAAK,IAAIa,EAAIF,EAAME,GAAK,EAAGA,IAAK,CAC9B,MAAOC,EAAMC,GAAQL,EAAIG,IACpBjB,EAAOjD,UAAYmE,KAAUlB,EAAOjD,WACvChC,EAASkD,QAAQkD,GAGrBnB,EAAOS,OAAOC,EAAK3F,GACnBA,EAASiG,OAAS,QAoCtB,OAVA9B,EAAiBM,gBAAgC,CAC/C/F,KAAM,QACNoB,YAAa,EACbC,WAAW,EACXpB,WAAY,CACVgG,MAAAA,KAGJD,sBAAsBN,EAAaD,GAE5BQ"}