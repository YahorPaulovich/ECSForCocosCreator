{"version":3,"file":"index.min.js","sources":["../../src/component.ts","../../src/utils.ts","../../src/mask.ts","../../src/entity.ts","../../src/world.ts","../../src/pool.ts","../../src/system.ts"],"sourcesContent":["// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Entity } from './entity';\nimport { deepAssign } from './utils';\nimport { World } from './world';\n\n/** A property specifically for the worldEntity */\nexport interface WorldComponent {\n  /** The associated world object */\n  world: World,\n}\n\n/** Component specification object */\nexport type ComponentSpec<T = Record<string, unknown>> = Omit<InternalComponentSpec<T>, \"id\">;\n\n/** Internal component specification object */\ninterface InternalComponentSpec<T = Record<string, unknown>> {\n  /** The maximum entities component can attach to */\n  entityLimit?: number | bigint | null,\n  /** The component's id */\n  id: bigint,\n  /** The component's name */\n  name: string,\n  /** The component's property object */\n  properties: T,\n  /** Is the component removable once attached? */\n  removable?: boolean,\n}\n\nexport interface Component<T = Record<string, unknown>> {\n  /** An array of entities associated with this component */\n  entities: Entity[],\n  /** The maximum entities component can attach to */\n  entityLimit: number | bigint | null,\n  /** The component's id */\n  id: Readonly<bigint>,\n  /** The component's name */\n  name: Readonly<string>,\n  /** The component's property object */\n  properties: T,\n  /** Is the component removable once attached? */\n  removable: boolean,\n  /** @hidden */\n  _addEntity(entity: Entity): void,\n  /** @hidden */\n  _removeEntity(entity: Entity): void,\n  /** Check if an entity is associated with this category */\n  hasEntity(entity: Entity): boolean\n  /** Set the maximum entities component can attach to */\n  setEntityLimit(limit: number | bigint | null): void,\n  /** Set whether the component be removed from entities once attached */\n  setRemovable(isRemovable: boolean): void,\n}\n\n/**\n * Creates a new component object\n * @param spec the components specification object\n */\nexport function _createComponent<T = Record<string, unknown>>(spec: InternalComponentSpec<T>): Component<T> {\n  const { id, name, properties } = { ...spec };\n\n  // configurables\n  let entityLimit = spec.entityLimit ?? null;\n  let removable = (spec.entityLimit === undefined) ? true : false;\n\n  // deep clone properties\n  deepAssign(properties, spec.properties);\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  const entities = new Set() as Set<Entity>;\n\n  const getters = {\n    /** @returns the component's id */\n    get id(): bigint {\n      return id;\n    },\n\n    /** @returns the component's name */\n    get name(): string {\n      return name;\n    },\n\n    /** @returns an array of entities associated with this component */\n    get entities(): Entity[] {\n      return Array.from(entities);\n    },\n\n    /** @returns the maximum entities this component can attach to */\n    get entityLimit(): number | bigint | null {\n      return entityLimit;\n    },\n\n    /** @returns the default properties of this component */\n    get properties(): T {\n      return properties;\n    },\n\n    /** @returns can the component be removed from entities once attached? */\n    get removable(): boolean {\n      return removable;\n    },\n  };\n\n  /**\n   * @hidden\n   * Associate an entity with this component\n   * @param entity the entity to associate\n   * @returns this component\n   */\n  const _addEntity = function(entity: Entity): void {\n    if (entityLimit != null && entities.size >= entityLimit) {\n      throw new Error(`component \"${name}\" has reached its entity limit of ${entityLimit}.`);\n    }\n    entities.add(entity);\n  };\n\n  /**\n   * @hidden\n   * Disassociate an entity from this component\n   * @param entity the entity to disassociate\n   * @returns this component\n   */\n  const _removeEntity = function(entity: Entity): void {\n    if (!removable) {\n      throw new Error(`component ${name} is not removable.`);\n    }\n    entities.delete(entity);\n  };\n\n  /**\n   * Check if an entity is associated with this component\n   * @param entity the entity to test for\n   */\n  const hasEntity = function(entity: Entity): boolean {\n    return entities.has(entity);\n  };\n\n  /**\n   * Set the maximum number of entities this component can be associated with at one time\n   * @param limit the limit or null to remove the limit\n   */\n  const setEntityLimit = function(limit: number | bigint | null): void {\n    entityLimit = limit;\n  };\n\n  /**\n   * Set whether the component be removed from entities once attached\n   * @param isRemovable boolean - true = removable\n   */\n  const setRemovable = function(isRemovable: boolean): void {\n    removable = isRemovable;\n  };\n\n  return Object.freeze(\n    Object.assign(\n      getters,\n      {\n        hasEntity,\n        setEntityLimit,\n        setRemovable,\n        _addEntity,\n        _removeEntity,\n      }\n    )\n  );\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nexport type DisallowedKeys =\n    \"constructor\" |\n    \"hasOwnProperty\" |\n    \"isPrototypeOf\" |\n    \"propertyIsEnumerable\" |\n    \"prototype\" |\n    \"toLocaleString\" |\n    \"toString\" |\n    \"valueOf\" |\n    \"__defineGetter__\" |\n    \"__defineSetter__\" |\n    \"__lookupGetter__\" |\n    \"__lookupGetter__\" |\n    \"__proto__\";\n\nexport type RestrictedObject<T> = Pick<T, Exclude<keyof T, DisallowedKeys>>;\n\n/** @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign */\nexport function deepAssign<T>(target: T, ...sources: T[]): T {\n    sources.forEach(source => {\n      const descriptors = Object.keys(source).reduce((descriptors, key) => {\n        const desc = Object.getOwnPropertyDescriptor(source, key);\n        if (desc !== undefined) {\n          descriptors[key] = desc;\n        }\n        return descriptors;\n      }, {} as Record<string | number | symbol, PropertyDescriptor>);\n\n      Object.getOwnPropertySymbols(source).forEach(sym => {\n        const descriptor = Object.getOwnPropertyDescriptor(source, sym);\n        if (descriptor?.enumerable) {\n          descriptors[sym as unknown as string] = descriptor;\n        }\n      });\n      Object.defineProperties(target, descriptors);\n    });\n    return target;\n}","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nexport type Mask = Readonly<{\n  value: bigint;\n  has(n: bigint): boolean;\n  set(n: bigint): void;\n  test(n: bigint): boolean;\n  toggle(n: bigint): void;\n  toString(): string;\n  unset(n: bigint): void;\n}>;\n\nexport function combineMasks(...masks: Mask[]): Mask {\n  let n = 0n;\n  masks.forEach((mask) => n |= mask.value);\n  return createMask(n);\n}\n\nexport function createMask(n: bigint): Mask {\n  if (typeof n === 'number') n = BigInt(n);\n\n  let { mask } = { mask: 1n << n };\n\n  const getters = {\n    get value(): bigint {\n      return mask;\n    }\n  };\n\n  const has = function(n: bigint): boolean {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    return Boolean((mask & n) === mask);\n  };\n\n  const set = function(n: bigint): void {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    mask |= (1n << n);\n  };\n\n  const test = function(n: bigint): boolean {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    return Boolean((mask & (1n << n)) !== 0n);\n  };\n\n  const toggle = function(n: bigint): void {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    mask ^= (1n << n);\n  };\n\n  const toString = function(): string {\n    return mask.toString(2);\n  };\n\n  const unset = function(n: bigint): void {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    mask &= ~(1n << n);\n  };\n\n  return Object.freeze(\n    Object.assign(\n      getters,\n      {\n        has,\n        set,\n        test,\n        toggle,\n        toString,\n        unset,\n      }\n    )\n  );\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component } from './component';\nimport { createMask } from './mask';\nimport { World } from './world';\n\nexport type Entity = Readonly<{\n  /** The entity's archetype */\n  archetype: bigint,\n  /** Array of components associated with the entity */\n  allComponents: Component<unknown>[],\n  /** The entity's id */\n  id: bigint,\n  /** The entity's world */\n  world: World | null,\n  /** Check if a component is present in an entity */\n  hasComponent(component: Component<unknown>): boolean,\n  /** @hidden */\n  _setId(id: bigint): Entity,\n  /** @hidden */\n  _setWorld(world: World | null): void,\n  /** @hidden */\n  _addComponent(component: Component<unknown>): Entity,\n  /** @hidden */\n  _removeComponent(component: Component<unknown>): Entity,\n}>\n\n/** Create an new entity */\nexport function _createEntity(): Entity {\n  const archetype = createMask(0n);\n  const components = {} as Record<string, unknown>;\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  const componentObjects = new Set() as Set<Component<unknown>>;\n\n  let _id = 0n;\n  let _world: World | null = null;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const data = Object.create(\n    { components },\n    {\n      /** @returns the entity's archetype */\n      archetype: {\n        get: function(): bigint {\n          return archetype.value;\n        }\n      },\n\n      /** @returns an array of this entity's components */\n      allComponents: {\n        get: function(): Component<unknown>[] {\n          return Array.from(componentObjects);\n        }\n      },\n\n      /** @returns the entity's id */\n      id: {\n        get: function(): bigint {\n          return _id;\n        }\n      },\n\n      world: {\n        get: function(): World | null | undefined {\n          return _world;\n        },\n      }\n    }\n  );\n\n  /** @hidden */\n  const _setId = function(id: bigint): void {\n    _id = id;\n  };\n\n  /** @hidden */\n  const _setWorld = function(world: World | null) {\n    _world = world;\n  };\n\n  /** @hidden */\n  const _addComponent = function<T>(component: Component<T>): void {\n    if (!components[component.name]) {\n      components[component.name] = {...component.properties};\n      archetype.set(component.id);\n      componentObjects.add(component);\n    }\n  };\n\n  /** @hidden */\n  const _removeComponent = function<T>(component: Component<T>): void {\n    if (components[component.name]) {\n      delete components[component.name];\n      archetype.unset(component.id);\n      componentObjects.delete(component);\n    }\n  };\n\n  /**\n   * Check if a component is present in the entity\n   * @param component the component or component name to test for\n   */\n  const hasComponent = function<T>(component: Component<T> | string): boolean {\n    const name = (typeof component === 'string') ? component : component.name;\n    return Boolean(components[name]);\n  };\n\n  return Object.freeze(\n    Object.assign(\n      data,\n      {\n        _setId,\n        _setWorld,\n        _addComponent,\n        _removeComponent,\n        hasComponent,\n      }\n    )\n  ) as Entity;\n}","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component, ComponentSpec, WorldComponent, _createComponent } from './component';\nimport { Entity, _createEntity } from './entity';\nimport { Pool, _createPool } from './pool';\nimport { System, SystemSpec, _createSystem } from './system';\n\ninterface WorldSpec {\n  initialPoolSize?: number | bigint;\n  maxComponents?: number | bigint;\n}\n\nexport interface World {\n  archetypes: [bigint, Set<Entity>][],\n  components: Component<unknown>[],\n  component: Component<WorldComponent>,\n  entities: Entity[],\n  entity: Entity,\n  systems: System[],\n  createEntity(): Entity,\n  removeEntity(entity: Entity): boolean,\n  getEntityById(id: bigint): Entity | undefined,\n  createComponent<T>(spec: ComponentSpec<T>): Component<T>,\n  removeComponent<T>(component: Component<T>): boolean,\n  getComponentByName(name: string): Component<unknown> | undefined,\n  addComponentsToEntity(entity: Entity, ...components: Component<unknown>[]): Entity,\n  removeComponentsFromEntity(entity: Entity, ...components: Component<unknown>[]): Entity,\n  createSystem(spec: SystemSpec, idx?: number): System,\n  removeSystem(system: System): boolean,\n  moveSystem(system: System | string, idx: number): System,\n  getSystemByName(name: string): System | undefined,\n  update(dt: number): void,\n  render(int: number): void,\n}\n\nexport function createWorld(spec: WorldSpec): World {\n  // world config\n  const {\n    initialPoolSize = 10,\n    maxComponents = 1024n,\n  } = { ...spec };\n\n  /** @private */\n  const isComponentRegistered = function<T>(component: Component<T>): boolean {\n    return components.get(component.name) === component;\n  };\n\n  /** @private **/\n  const addEntityToArchetypeArray = function(entity: Entity) {\n    if (archetypes.get(entity.archetype) === undefined) {\n      archetypes.set(entity.archetype, new Set());\n    }\n    archetypes.get(entity.archetype)?.add(entity);\n  };\n\n  /** @private */\n  const removeEntityFromArchetypeArray = function(entity: Entity) {\n    archetypes.get(entity.archetype)?.delete(entity);\n  };\n\n  /** @private */\n  const destroyEntity = function(entity: Entity): Entity {\n    entity._setId(-1n);\n    removeComponentsFromEntity(entity, ...entity.allComponents);\n    removeEntityFromArchetypeArray(entity);\n    return entity;\n  };\n\n  // constants\n  const archetypes = new Map() as Map<bigint, Set<Entity>>;\n  const components = new Map() as Map<string, Component<unknown>>;\n  const entities = new Map() as Map<bigint, Entity>;\n  const systems = [] as System[];\n  const entityPool: Pool<Entity> = _createPool({\n    create: _createEntity,\n    destroy: destroyEntity,\n    initialSize: initialPoolSize,\n  });\n\n  // variables\n  let entityCount = 0n;\n  let componentCount = 0n;\n  let systemCount = 0n;\n  let worldComponent = {} as Component<WorldComponent>;\n  let worldEntity = {} as Entity;\n\n  const getters = {\n    /** @returns an array of archetypes and their entities */\n    get archetypes() {\n      return Array.from(archetypes.entries());\n    },\n\n    /** @returns an array of components in the world */\n    get components() {\n      return Array.from(components.values());\n    },\n\n    /** @returns the world component */\n    get component(): Component<WorldComponent> {\n      return worldComponent;\n    },\n\n    /** @returns an array of entities in the world */\n    get entities() {\n      return Array.from(entities.values());\n    },\n\n    /** @returns the world entity */\n    get entity() {\n      return worldEntity;\n    },\n\n    /** @returns an array of systems in the world */\n    get systems() {\n      return Array.from(systems);\n    },\n  };\n\n  /**\n   * Remove an entity from the world\n   * and disassociate it from any components in the world\n   * @param entity the entity to remove\n   * @returns true if removed, false if entity not found\n   */\n  const removeEntity = function(entity: Entity): boolean {\n    if (!entity) return false;\n    const b = entities.delete(entity.id);\n    if (b === true) {\n      entityPool.release(entity);\n    }\n    return b;\n  };\n\n  /**\n   * Find an entity in the world by its id\n   * @param id the entity id to search for.\n   */\n  const getEntityById = function(id: bigint): Entity | undefined {\n    return entities.get(id);\n  };\n\n  /**\n   * Create a new component\n   * @param spec the component's specification object\n   * @returns the created component\n   */\n  const createComponent = function<T>(spec: ComponentSpec<T>): Component<T> {\n    if (maxComponents !== undefined && componentCount > maxComponents) {\n      throw new Error('Maximum component count reached.');\n    }\n    if (components.has(spec.name)) {\n      throw new Error(`component \"${spec.name}\" already exists.`);\n    }\n    /** @todo validate input */\n    const component = _createComponent({...spec, id: componentCount});\n    components.set(component.name, component);\n    ++componentCount;\n    return component;\n  };\n\n  /**\n   * Remove a component from the world\n   * and disassociate it from any entities\n   * @param component the component to remove\n   * @returns true if removed, false if component not found\n   */\n  const removeComponent = function<T>(component: Component<T>): boolean {\n    if (!component?.name) return false;\n    const b = components.delete(component.name);\n    if (b === true) {\n      component.entities.forEach((entity) => removeComponentsFromEntity(entity, component));\n    }\n    return b;\n  };\n\n  /**\n   * Find a component in the world by its name\n   * @param name the case-sensitive component name to search for.\n   */\n  const getComponentByName = function(name: string): Component<unknown> | undefined {\n    return components.get(name);\n  };\n\n  /**\n   * Associate components with an entity\n   * @param entity the entity to add components to\n   * @param components one or more component objects\n   */\n  const addComponentsToEntity = function(entity: Entity, ...components: Component<unknown>[]): Entity {\n    if (!entity) {\n      throw new Error('no entity provided.');\n    }\n    if (!components?.length) {\n      return entity;\n    }\n    removeEntityFromArchetypeArray(entity);\n    components.forEach((component) => {\n      if (isComponentRegistered(component) === false) {\n        /** @todo add function to avoid this error */\n        throw new Error(`component ${component.name} is not registered in this world.`);\n      }\n      if (component.hasEntity(entity) == false) {\n        component._addEntity(entity);\n        entity._addComponent(component);\n      }\n    });\n    addEntityToArchetypeArray(entity);\n    return entity;\n  };\n\n  /**\n   * Disassociate components from an entity\n   * @param entity the entity to remove components from\n   * @param components one or more component objects\n   */\n  const removeComponentsFromEntity = function(entity: Entity, ...components: Component<unknown>[]): Entity {\n    if (!entity) {\n      throw new Error('no entity provided.');\n    }\n    if (!components?.length) {\n      return entity;\n    }\n    removeEntityFromArchetypeArray(entity);\n    components.forEach((component) => {\n      if (isComponentRegistered(component) === false) {\n        throw new Error(`component ${component.name} is not registered in this world.`);\n      }\n      if (component.hasEntity(entity) == true) {\n        component._removeEntity(entity);\n        entity._removeComponent(component);\n      }\n    });\n    addEntityToArchetypeArray(entity);\n    return entity;\n  };\n\n  /**\n   * Create an new system\n   * @param spec the system's specification object\n   * @param idx optional execution index (i.e. 0 gets called first);\n   * @returns the created system\n   */\n  const createSystem = function(spec: SystemSpec, idx?: number): System {\n    const tmp = getSystemByName(spec.name);\n    if (!tmp) {\n      const system = _createSystem({...spec, id: systemCount});\n      if (idx !== undefined) {\n        systems.splice(idx, 0, system);\n      } else {\n        systems.push(system);\n      }\n      ++systemCount;\n      return system;\n    } else {\n      throw new Error(`system \"${spec.name}\" already exists.`);\n    }\n  };\n\n  /**\n   * Remove a system from the world\n   * @param system the system to remove\n   * @returns true if remove, false if system not found\n   */\n  const removeSystem = function(system: System): boolean {\n    if (!system?.name) return false;\n    const idx = systems.indexOf(system);\n    if (idx > -1) {\n      systems.splice(idx, 1);\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Move a system in the execution order\n   * @param system the system to move\n   * @param idx the execution array index to move the system to\n   */\n  const moveSystem = function(system: System, idx: number): System {\n    if (!system?.id) {\n      throw new Error('no system provided.');\n    }\n    if (idx === undefined || typeof idx !== 'number') {\n      throw new Error('no new index provided.');\n    }\n    const removed = removeSystem(system);\n    if (removed === true) {\n      systems.splice(idx, 0, system);\n    }\n    return system;\n  };\n\n  /**\n   * Find a system in the world by its name\n   * @param name the case-sensitive system name to search for.\n   */\n  const getSystemByName = function(name: string): System | undefined {\n    if (!name) return undefined;\n    return systems.find((system) => system.name === name);\n  };\n\n  /**\n   * Call update on all systems\n   * @param dt frame delta time\n   */\n  const update = function(dt: number): void {\n    // for loops might be out of fashion,\n    // but they're much faster than reduce\n    const acs = Array.from(archetypes.entries());\n    const aLen = acs.length - 1;\n    const sLen = systems.length - 1;\n    const entities = [] as Entity[];\n    for (let i = sLen; i >= 0; i--) {\n      const system = systems[i];\n      if (system.enabled === false) continue;\n      for (let j = aLen; j >= 0; j--) {\n        const [arch, ents] = acs[j];\n        if ((system.archetype & arch) === system.archetype) {\n          entities.push(...ents);\n        }\n      }\n      system.update(dt, entities);\n      entities.length = 0;\n    }\n  };\n\n  /**\n   * Call render on all systems\n   * @param int frame interpolation\n   */\n  const render = function(int: number): void {\n    // for loops might be out of fashion,\n    // but they're much faster than reduce\n    const acs = Array.from(archetypes.entries());\n    const aLen = acs.length - 1;\n    const sLen = systems.length - 1;\n    const entities = [] as Entity[];\n    for (let i = sLen; i >= 0; i--) {\n      const system = systems[i];\n      if (system.enabled === false) continue;\n      for (let j = aLen; j >= 0; j--) {\n        const [arch, ents] = acs[j];\n        if ((system.archetype & arch) === system.archetype) {\n          entities.push(...ents);\n        }\n      }\n      system.render(int, entities);\n      entities.length = 0;\n    }\n  };\n\n  const world: World = Object.assign(\n    getters,\n    {\n      /**\n       * Create a new entity\n       * @returns a new entity\n       */\n      createEntity: function(): Entity {\n        const entity = entityPool.get();\n        entity._setId(entityCount);\n        entity._setWorld(world);\n        entities.set(entityCount, entity);\n        addEntityToArchetypeArray(entity);\n        ++entityCount;\n        return entity;\n      },\n      removeEntity,\n      getEntityById,\n      createComponent,\n      removeComponent,\n      getComponentByName,\n      addComponentsToEntity,\n      removeComponentsFromEntity,\n      createSystem,\n      removeSystem,\n      moveSystem,\n      getSystemByName,\n      update,\n      render,\n    }\n  );\n\n\n  // create worldEntity\n  worldEntity = world.createEntity();\n\n  // worldEntity setup - ensures archetype 1n is always just the worldEntity\n  worldComponent = createComponent<WorldComponent>({\n    name: \"world\",\n    entityLimit: 1,\n    removable: false,\n    properties: {\n      world,\n    },\n  });\n  addComponentsToEntity(worldEntity, worldComponent);\n\n  return Object.freeze(world);\n}\n\n\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nexport interface PoolSpec<T> {\n  initialSize?: number | bigint,\n  create: (() => T),\n  destroy: ((obj: T) => T),\n}\n\nexport interface Pool<T> {\n  get(): T,\n  release(obj: T): void,\n}\n\nexport function _createPool<T>(spec: PoolSpec<T>): Pool<T> {\n  const {\n    initialSize = 2,\n    create,\n    destroy\n  } = { ...spec };\n\n  const pool = [] as T[];\n\n  // populate pool to initial size\n  for (let i = 0; i < initialSize; i++) {\n    pool.push(create());\n  }\n\n  const get = function(): T {\n    return pool.pop() ?? create();\n  };\n\n  const release = function(obj: T): void {\n    pool.push(destroy(obj));\n  };\n\n  return Object.freeze({\n    get,\n    release,\n  });\n}","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component } from './component';\nimport { Entity } from './entity';\nimport { createMask } from './mask';\n\nexport type SystemSpec = Omit<InternalSystemSpec, \"id\">;\n\ninterface InternalSystemSpec {\n  /** The system's required components */\n  components?: Component<unknown>[],\n  /** The system's id */\n  id: bigint,\n  /** A name / label for the system */\n  name: string,\n  /** The system's render function */\n  renderFn?: (int: number, entities: Entity[]) => void,\n  /** The system's update function */\n  updateFn?: (dt: number, entities: Entity[]) => void,\n}\n\nexport type System = Readonly<{\n  /** The system's associated entity archetype */\n  archetype: bigint,\n  /** Is the system enabled? */\n  enabled: boolean,\n  /** The system's id */\n  id: bigint,\n  /** The name / label of the system */\n  name: string,\n  /** Disable the system */\n  disable(): void,\n  /** Enable the system */\n  enable(): void,\n  /** The system's render function */\n  render(int: number, entities: Entity[]): void,\n  /** The system's update function */\n  update(dt: number, entities: Entity[]): void,\n}>;\n\n/**\n * Creates a new system object\n * @param spec the system specification object\n */\nexport function _createSystem(spec: InternalSystemSpec): System {\n  const {\n    components = [],\n    id,\n    name,\n    updateFn = (() => void 0),\n    renderFn = (() => void 0),\n  } = { ...spec };\n\n  const archetype = createMask(0n);\n  components.forEach((component) => archetype.set(component.id));\n\n  let enabled = false;\n\n  const getters = {\n    /** @returns the system's archetype */\n    get archetype(): bigint {\n      return archetype.value;\n    },\n\n    /** @returns whether the system is enabled or not */\n    get enabled(): boolean {\n      return enabled;\n    },\n\n    /** @returns the system's id */\n    get id(): bigint {\n      return id;\n    },\n\n    /** @returns the system's name */\n    get name(): string {\n      return name;\n    },\n  };\n\n  /** Enable the system */\n  const enable = function(): void {\n    enabled = true;\n  };\n\n  /** Disable the system */\n  const disable = function(): void {\n    enabled = false;\n  };\n\n  /** Call the system's update function */\n  const update = function(dt: number, entities: Entity[]): void {\n    updateFn(dt, entities);\n  };\n\n  /** Call the system's render function */\n  const render = function(int: number, entities: Entity[]): void {\n    renderFn(int, entities);\n  };\n\n  return Object.freeze(\n    Object.assign(\n      getters,\n      {\n        enable,\n        disable,\n        update,\n        render,\n      }\n    )\n  );\n}\n"],"names":["_createComponent","spec","id","name","properties","entityLimit","removable","undefined","deepAssign","target","sources","forEach","source","descriptors","Object","keys","reduce","key","desc","getOwnPropertyDescriptor","getOwnPropertySymbols","sym","descriptor","enumerable","defineProperties","entities","Set","getters","Array","from","freeze","assign","hasEntity","entity","has","setEntityLimit","limit","setRemovable","isRemovable","_addEntity","size","Error","add","_removeEntity","delete","createMask","n","BigInt","mask","value","Boolean","set","test","toggle","toString","unset","_createEntity","archetype","components","componentObjects","_id","_world","data","create","get","allComponents","world","_setId","_setWorld","_addComponent","component","_removeComponent","hasComponent","createWorld","initialPoolSize","maxComponents","isComponentRegistered","addEntityToArchetypeArray","archetypes","removeEntityFromArchetypeArray","Map","systems","entityPool","_createPool","initialSize","destroy","pool","i","push","pop","release","obj","removeComponentsFromEntity","entityCount","componentCount","systemCount","worldComponent","worldEntity","entries","values","createComponent","addComponentsToEntity","length","removeSystem","system","idx","indexOf","splice","getSystemByName","find","createEntity","removeEntity","b","getEntityById","removeComponent","getComponentByName","createSystem","_createSystem","updateFn","renderFn","enabled","enable","disable","update","dt","render","int","moveSystem","acs","aLen","j","arch","ents"],"mappings":"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"}