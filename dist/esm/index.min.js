/*! *****************************************************************************
 *
 * miski
 * v0.1.0
 *
 * MIT License
 * 
 * Copyright (C) 2021 Peter Hughes<https://www.phugh.es>, all rights reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
***************************************************************************** */
function createMask(e){"number"==typeof e&&(e=BigInt(e));let{mask:t}={mask:1n<<e};const n={get value(){return t}};return Object.freeze(Object.assign(n,{has:function(e){return"number"==typeof e&&(e=BigInt(e)),Boolean((t&e)===t)},set:function(e){"number"==typeof e&&(e=BigInt(e)),t|=1n<<e},test:function(e){return"number"==typeof e&&(e=BigInt(e)),Boolean(0n!==(t&1n<<e))},toggle:function(e){"number"==typeof e&&(e=BigInt(e)),t^=1n<<e},toString:function(){return t.toString(2)},unset:function(e){"number"==typeof e&&(e=BigInt(e)),t&=~(1n<<e)}}))}function _createEntity(){const{archetype:e,components:t,componentObjects:n}={archetype:createMask(0n),components:{},componentObjects:new Set};let{_id:r}={_id:0n};const o=Object.create({components:t},{archetype:{get:function(){return e.value}},allComponents:{get:function(){return Array.from(n)}},id:{get:function(){return r}}});return Object.freeze(Object.assign(o,{_setId:function(e){r=e},_addComponent:function(r){t[r.name]||(t[r.name]={...r.properties},e.set(r.id),n.add(r))},_removeComponent:function(r){t[r.name]&&(delete t[r.name],e.unset(r.id),n.delete(r))},hasComponent:function(e){const n="string"==typeof e?e:e.name;return Boolean(t[n])}}))}function _createPool(e){const{initialSize:t=2,create:n,destroy:r}={...e},o=[];for(let e=0;e<t;e++)o.push(n());return Object.freeze({get:function(){return o.pop()??n()},release:function(e){o.push(r(e))}})}function createWorld(e){const{initialPoolSize:t=10,maxComponents:n=1024n}={...e},{archetypes:r,components:o,entities:c,systems:i,entityPool:s}={archetypes:new Map,components:new Map,entities:new Map,systems:[],entityPool:_createPool({create:_createEntity,destroy:function _destroyEntity(e){return e._setId(-1n),removeComponentsFromEntity(e,...e.allComponents),removeEntityFromArchetypeArray(e),e},initialSize:t})};let{componentCount:a,entityCount:u,systemCount:p}={componentCount:0n,entityCount:0n,systemCount:0n};const addEntityToArchetypeArray=e=>{const t=r.get(e.archetype);t?t.includes(e)||t.push(e):r.set(e.archetype,[e])},removeEntityFromArchetypeArray=e=>{const t=r.get(e.archetype),n=t?.indexOf(e);void 0!==n&&n>-1&&t?.splice(n,1)};const f={get archetypes(){return Array.from(r.entries())},get components(){return Array.from(o.values())},get entities(){return Array.from(c.values())},get systems(){return Array.from(i)}},removeComponentsFromEntity=function(e,...t){return removeEntityFromArchetypeArray(e),t.forEach((t=>{e._removeComponent(t),t._removeEntity(e)})),addEntityToArchetypeArray(e),e};return Object.freeze(Object.assign(f,{createEntity:function(){const e=s.get(),t=++u;return e._setId(t),c.set(t,e),addEntityToArchetypeArray(e),e},removeEntity:function(e){const t=c.delete(e.id);return t&&s.release(e),t},createComponent:function(e){if(n&&a>n)throw new Error("Maximum component count reached.");const t=function _createComponent(e){const{id:t,name:n,properties:r}={...e},{entities:o}={entities:new Set},c={get id(){return t},get name(){return n},get entities(){return Array.from(o)},get properties(){return r}};return Object.freeze(Object.assign(c,{hasEntity:function(e){return o.has(e)},_addEntity:function(e){o.add(e)},_removeEntity:function(e){o.delete(e)}}))}({...e,id:++a});return o.set(t.name,t),t},removeComponent:function(e){const t=o.delete(e.name);return t&&e.entities.forEach((t=>t._removeComponent(e))),t},addComponentsToEntity:function(e,...t){return removeEntityFromArchetypeArray(e),t.forEach((t=>{e._addComponent(t),t._addEntity(e)})),addEntityToArchetypeArray(e),e},removeComponentsFromEntity,createSystem:function(e,t){const n=function _createSystem(e){const{id:t,components:n=[],updateFn:r=(()=>{}),renderFn:o=(()=>{})}={...e},{archetype:c}={archetype:createMask(0n)};let{enabled:i}={enabled:!1};n.forEach((e=>c.set(e.id)));const s={get id(){return t},get archetype(){return c.value},get enabled(){return i}};return Object.freeze(Object.assign(s,{enable:function(){i=!0},disable:function(){i=!1},update:function(e,t){r(e,t)},render:function(e,t){o(e,t)}}))}({...e,id:++p});return void 0!==t?i.splice(t,0,n):i.push(n),n},removeSystem:function(e){const t=i.indexOf(e);return t>-1&&(i.splice(t,1),!0)},update:function(e){i.forEach((t=>{if(t.enabled){const n=Array.from(r.entries()).reduce(((e,[n,r])=>((t.archetype&n)===t.archetype&&e.push(...r),e)),[]);t.update(e,n)}}))},render:function(e){i.forEach((t=>{if(t.enabled){const n=Array.from(r.entries()).reduce(((e,[n,r])=>((t.archetype&n)===t.archetype&&e.push(...r),e)),[]);t.render(e,n)}}))}}))}export{createWorld};
//# sourceMappingURL=index.min.js.map
