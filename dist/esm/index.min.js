/*! *****************************************************************************
 *
 * miski
 * v0.1.0
 *
 * MIT License
 * 
 * Copyright (C) 2021 Peter Hughes<https://www.phugh.es>, all rights reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
***************************************************************************** */
function createMask(e){"number"==typeof e&&(e=BigInt(e));let{mask:t}={mask:1n<<e};const n={get value(){return t}};return Object.freeze(Object.assign(n,{has:function(e){return"number"==typeof e&&(e=BigInt(e)),Boolean((t&e)===t)},set:function(e){"number"==typeof e&&(e=BigInt(e)),t|=1n<<e},test:function(e){return"number"==typeof e&&(e=BigInt(e)),Boolean(0n!==(t&1n<<e))},toggle:function(e){"number"==typeof e&&(e=BigInt(e)),t^=1n<<e},toString:function(){return t.toString(2)},unset:function(e){"number"==typeof e&&(e=BigInt(e)),t&=~(1n<<e)}}))}function _destroyEntity(e){return e._destroy(),e}function _createEntity(){const{archetype:e,components:t,componentObjects:n}={archetype:createMask(0n),components:{},componentObjects:new Set};let{_id:o}={_id:0n};const r=Object.create({components:t},{archetype:{get:function(){return e.value}},id:{get:function(){return o}}}),_removeComponent=function(o){t[o.name]&&(delete t[o.name],e.unset(o.id),n.delete(o))};return Object.freeze(Object.assign(r,{_destroy:function(){o=0n,n.forEach((e=>_removeComponent(e)))},_setId:function(e){o=e},_addComponent:function(o){t[o.name]||(t[o.name]={...o.properties},e.set(o.id),n.add(o))},_removeComponent,hasComponent:function(e){const n="string"==typeof e?e:e.name;return Boolean(t[n])}}))}function _createPool(e){const{initialSize:t=2,create:n,destroy:o}=e,r=[];for(let e=0;e<t;e++)r.push(n());return Object.freeze({get:function(){return r.length>0?r.pop():n()},release:function(e){r.push(o(e))}})}function createWorld(e){const{initialPoolSize:t=10,maxComponents:n=1024n}=e,{archetypes:o,components:r,entities:c,systems:i,entityPool:s}={archetypes:new Map,components:new Map,entities:new Map,systems:[],entityPool:_createPool({create:_createEntity,destroy:_destroyEntity,initialSize:t})};let{componentCount:u,entityCount:a,systemCount:m}={componentCount:0n,entityCount:0n,systemCount:0n};const addEntityToArchetypeArray=e=>{const t=o.get(e.archetype);t?t.includes(e)||t.push(e):o.set(e.archetype,[e])},removeEntityFromArchetypeArray=e=>{const t=o.get(e.archetype),n=t?.indexOf(e);n&&n>-1&&t?.splice(n,1)},f={get components(){return Array.from(Object.values(r))},get entities(){return Array.from(Object.values(c))},get systems(){return Array.from(i)}};return Object.freeze(Object.assign(f,{createEntity:function(){const e=s.get(),t=++a;return e._setId(t),c.set(t,e),e},removeEntity:function(e){const t=c.delete(e.id);return t&&s.release(e),t},createComponent:function(e){if(n&&u>n)throw new Error("Maximum component count reached.");const t=function _createComponent(e){const{id:t,name:n,properties:o}=e,{entities:r}={entities:new Set},c={get id(){return t},get name(){return n},get entities(){return Array.from(r)},get properties(){return o}};return Object.freeze(Object.assign(c,{hasEntity:function(e){return r.has(e)},_addEntity:function(e){r.add(e)},_removeEntity:function(e){r.delete(e)}}))}({...e,id:++u});return r.set(t.name,t),t},removeComponent:function(e){const t=r.delete(e.name);return t&&e.entities.forEach((t=>t._removeComponent(e))),t},addComponentsToEntity:function(e,...t){return removeEntityFromArchetypeArray(e),t.forEach((t=>{e._addComponent(t),t._addEntity(e)})),addEntityToArchetypeArray(e),e},removeComponentsFromEntity:function(e,...t){return removeEntityFromArchetypeArray(e),t.forEach((t=>{e._removeComponent(t),t._removeEntity(e)})),addEntityToArchetypeArray(e),e},createSystem:function(e){const t=function _createSystem(e){const{id:t,system:n,components:o}=e,{archetype:r}={archetype:createMask(0n)};let{enabled:c}={enabled:!1};o.forEach((e=>r.set(e.id)));const i={get id(){return t},get archetype(){return r.value},get enabled(){return c}};return Object.freeze(Object.assign(i,{enable:function(){c=!0},disable:function(){c=!1},update:function(e,t){n(e,t)}}))}({...e,id:++m});return i.push(t),t},removeSystem:function(e){const t=i.indexOf(e);return t>-1&&(i.splice(t,1),!0)},update:function(e){i.forEach((t=>{if(t.enabled){const n=o.get(t.archetype);n&&n.length&&t.update(e,n)}}))}}))}export{createWorld};
//# sourceMappingURL=index.min.js.map
