{"version":3,"file":"index.min.js","sources":["../../src/mask.ts","../../src/entity.ts","../../src/pool.ts","../../src/world.ts","../../src/component.ts","../../src/system.ts"],"sourcesContent":["// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nexport type Mask = Readonly<{\n  value: bigint;\n  has(n: bigint): boolean;\n  set(n: bigint): void;\n  test(n: bigint): boolean;\n  toggle(n: bigint): void;\n  toString(): string;\n  unset(n: bigint): void;\n}>;\n\nexport function combineMasks(...masks: Mask[]): Mask {\n  let n = 0n;\n  masks.forEach((mask) => n |= mask.value);\n  return createMask(n);\n}\n\nexport function createMask(n: bigint): Mask {\n  if (typeof n === 'number') n = BigInt(n);\n\n  let { mask } = { mask: 1n << n };\n\n  const getters = {\n    get value(): bigint {\n      return mask;\n    }\n  };\n\n  const has = function(n: bigint): boolean {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    return Boolean((mask & n) === mask);\n  };\n\n  const set = function(n: bigint): void {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    mask |= (1n << n);\n  };\n\n  const test = function(n: bigint): boolean {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    return Boolean((mask & (1n << n)) !== 0n);\n  };\n\n  const toggle = function(n: bigint): void {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    mask ^= (1n << n);\n  };\n\n  const toString = function(): string {\n    return mask.toString(2);\n  };\n\n  const unset = function(n: bigint): void {\n    if (typeof n === 'number') {\n      n = BigInt(n);\n    }\n    mask &= ~(1n << n);\n  };\n\n  return Object.freeze(\n    Object.assign(\n      getters,\n      {\n        has,\n        set,\n        test,\n        toggle,\n        toString,\n        unset,\n      }\n    )\n  );\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component } from './component';\nimport { createMask } from './mask';\n\nexport type Entity = Readonly<{\n  /** The entity's archetype */\n  archetype: bigint,\n  /** The entity's id */\n  id: bigint,\n  /** Check if a component is present in an entity */\n  hasComponent(component: Component<unknown>): boolean,\n  /** @hidden */\n  _destroy(): Entity,\n  /** @hidden */\n  _setId(id: bigint): Entity,\n  /** @hidden */\n  _addComponent(component: Component<unknown>): Entity,\n  /** @hidden */\n  _removeComponent(component: Component<unknown>): Entity,\n}>\n\n/** Reset an entity to a blank state */\nexport function _destroyEntity(entity: Entity): Entity {\n  entity._destroy();\n  return entity;\n}\n\n/** Create an new entity */\nexport function _createEntity(): Entity {\n  const {\n    archetype,\n    components,\n    componentObjects,\n  } = {\n    archetype: createMask(0n),\n    components: {} as Record<string, unknown>,\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    componentObjects: new Set() as Set<Component<unknown>>,\n  };\n\n  let { _id } = { _id: 0n };\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const data = Object.create(\n    { components },\n    {\n      /** @returns the entity's archetype */\n      archetype: {\n        get: function(): bigint {\n          return archetype.value;\n        }\n      },\n\n      /** @returns the entity's id */\n      id: {\n        get: function(): bigint {\n          return _id;\n        }\n      }\n    }\n  );\n\n  /** @hidden */\n  const _destroy = function(): void {\n    _id = 0n;\n    componentObjects.forEach((component) => _removeComponent(component));\n  };\n\n  /** @hidden */\n  const _setId = function(id: bigint): void {\n    _id = id;\n  };\n\n  /** @hidden */\n  const _addComponent = function<T>(component: Component<T>): void {\n    if (!components[component.name]) {\n      components[component.name] = {...component.properties};\n      archetype.set(component.id);\n      componentObjects.add(component);\n    }\n  };\n\n  /** @hidden */\n  const _removeComponent = function<T>(component: Component<T>): void {\n    if (components[component.name]) {\n      delete components[component.name];\n      archetype.unset(component.id);\n      componentObjects.delete(component);\n    }\n  };\n\n  /**\n   * Check if a component is present in the entity\n   * @param component the component or component name to test for\n   */\n  const hasComponent = function<T>(component: Component<T> | string): boolean {\n    const name = (typeof component === 'string') ? component : component.name;\n    return Boolean(components[name]);\n  };\n\n  return Object.freeze(\n    Object.assign(\n      data,\n      {\n        _destroy,\n        _setId,\n        _addComponent,\n        _removeComponent,\n        hasComponent,\n      }\n    )\n  ) as Entity;\n}","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nexport interface PoolSpec<T> {\n  initialSize?: number | bigint,\n  create: (() => T),\n  destroy: ((obj: T) => T),\n}\n\nexport interface Pool<T> {\n  get(): T,\n  release(obj: T): void,\n}\n\nexport function _createPool<T>(spec: PoolSpec<T>): Pool<T> {\n  const {\n    initialSize = 2,\n    create,\n    destroy\n  } = spec;\n\n  const pool = [] as T[];\n\n  // populate pool to initial size\n  for (let i = 0; i < initialSize; i++) {\n    pool.push(create());\n  }\n\n  const get = function(): T {\n    if (pool.length > 0) {\n      return pool.pop()!;\n    } else {\n      return create();\n    }\n  };\n\n  const release = function(obj: T): void {\n    pool.push(destroy(obj));\n  };\n\n  return Object.freeze({\n    get,\n    release,\n  });\n}","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component, ComponentSpec, _createComponent } from './component';\nimport { Entity, _createEntity, _destroyEntity } from './entity';\nimport { _createPool } from './pool';\nimport { System, SystemSpec, _createSystem } from './system';\n\ninterface WorldSpec {\n  initialPoolSize?: number | bigint;\n  maxComponents?: number | bigint;\n}\n\ninterface World {\n  components: Component<unknown>[],\n  entities: Entity[],\n  systems: System[],\n  createEntity(): Entity,\n  removeEntity(entity: Entity): boolean,\n  createComponent<T>(spec: ComponentSpec<T>): Component<T>,\n  removeComponent<T>(component: Component<T>): boolean,\n  addComponentsToEntity(entity: Entity, ...components: Component<unknown>[]): Entity,\n  removeComponentsFromEntity(entity: Entity, ...components: Component<unknown>[]): Entity,\n  createSystem(spec: SystemSpec): System,\n  removeSystem(system: System): boolean,\n  update(dt: number): void,\n}\n\nexport function createWorld(spec: WorldSpec): World {\n  // world config\n  const {\n    initialPoolSize = 10,\n    maxComponents = 1024n,\n  } = spec;\n\n  // constants\n  const {\n    archetypes,\n    components,\n    entities,\n    systems,\n    entityPool,\n  } = {\n    archetypes: new Map() as Map<bigint, Entity[]>,\n    components: new Map() as Map<string, Component<unknown>>,\n    entities: new Map() as Map<bigint, Entity>,\n    systems: [] as System[],\n    entityPool: _createPool({create: _createEntity, destroy: _destroyEntity, initialSize: initialPoolSize}),\n  };\n\n  // variables\n  let {\n    componentCount,\n    entityCount,\n    systemCount,\n  } = {\n    componentCount: 0n,\n    entityCount: 0n,\n    systemCount: 0n,\n  };\n\n  /** @private **/\n  const addEntityToArchetypeArray = (entity: Entity) => {\n    const archetype = archetypes.get(entity.archetype);\n    if (!archetype) {\n      archetypes.set(entity.archetype, [entity]);\n    } else {\n      if (!archetype.includes(entity)) {\n        archetype.push(entity);\n      }\n    }\n  };\n\n  /** @private */\n  const removeEntityFromArchetypeArray = (entity: Entity) => {\n    const archetype = archetypes.get(entity.archetype);\n    const idx = archetype?.indexOf(entity);\n    if (idx && idx > -1) {\n      archetype?.splice(idx, 1);\n    }\n  };\n\n  const getters = {\n    /** @returns an array of components in the world */\n    get components() {\n      return Array.from(Object.values(components)) as Component<unknown>[];\n    },\n\n    /** @returns an array of entities in the world */\n    get entities() {\n      return Array.from(Object.values(entities)) as Entity[];\n    },\n\n    /** @returns an array of systems in the world */\n    get systems() {\n      return Array.from(systems);\n    },\n  };\n\n  /**\n   * Create a new entity\n   * @returns a new entity\n   */\n  const createEntity = function(): Entity {\n    const entity = entityPool.get();\n    const id = ++entityCount;\n    entity._setId(id);\n    entities.set(id, entity);\n    return entity;\n  };\n\n  /**\n   * Remove an entity from the world\n   * and disassociate it from any components in the world\n   * @param entity the entity to remove\n   * @returns true if removed, false if entity not found\n   */\n  const removeEntity = function(entity: Entity): boolean {\n    const b = entities.delete(entity.id);\n    if (b) {\n      entityPool.release(entity);\n    }\n    return b;\n  };\n\n  /**\n   * Create a new component\n   * @param spec the component's specification object\n   * @returns the created component\n   */\n  const createComponent = function<T>(spec: ComponentSpec<T>): Component<T> {\n    if (maxComponents && componentCount > maxComponents) {\n      throw new Error('Maximum component count reached.');\n    }\n    const id = ++componentCount;\n    const component = _createComponent({...spec, id});\n    components.set(component.name, component);\n    return component;\n  };\n\n  /**\n   * Remove a component from the world\n   * and disassociate it from any entities\n   * @param component the component to remove\n   * @returns true if removed, false if component not found\n   */\n  const removeComponent = function<T>(component: Component<T>): boolean {\n    const b = components.delete(component.name);\n    if (b) {\n      component.entities.forEach((entity) => entity._removeComponent(component));\n    }\n    return b;\n  };\n\n  /**\n   * Associate components with an entity\n   * @param entity the entity to add components to\n   * @param components one or more component objects\n   */\n  const addComponentsToEntity = function(entity: Entity, ...components: Component<unknown>[]): Entity {\n    removeEntityFromArchetypeArray(entity);\n    components.forEach((component) => {\n      entity._addComponent(component);\n      component._addEntity(entity);\n    });\n    addEntityToArchetypeArray(entity);\n    return entity;\n  };\n\n  /**\n   * Disassociate components from an entity\n   * @param entity the entity to remove components from\n   * @param components one or more component objects\n   */\n  const removeComponentsFromEntity = function(entity: Entity, ...components: Component<unknown>[]): Entity {\n    removeEntityFromArchetypeArray(entity);\n    components.forEach((component) => {\n      entity._removeComponent(component);\n      component._removeEntity(entity);\n    });\n    addEntityToArchetypeArray(entity);\n    return entity;\n  };\n\n  /**\n   * Create an new system\n   * @param spec the system's specification object\n   * @returns the created system\n   */\n  const createSystem = function(spec: SystemSpec): System {\n    const id = ++systemCount;\n    const system = _createSystem({...spec, id});\n    systems.push(system);\n    return system;\n  };\n\n  /**\n   * Remove a system from the world\n   * @param system the system to remove\n   * @returns true if remove, false if system not found\n   */\n  const removeSystem = function(system: System): boolean {\n    const idx = systems.indexOf(system);\n    if (idx > -1) {\n      systems.splice(idx, 1);\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Update all systems\n   * @param dt frame delta time\n   */\n  const update = function(dt: number): void {\n    systems.forEach((system) => {\n      if (system.enabled) {\n        const entities = archetypes.get(system.archetype);\n        if (entities && entities.length) {\n          system.update(dt, entities);\n        }\n      }\n    });\n  };\n\n  return Object.freeze(\n    Object.assign(\n      getters,\n      {\n        createEntity,\n        removeEntity,\n        createComponent,\n        removeComponent,\n        addComponentsToEntity,\n        removeComponentsFromEntity,\n        createSystem,\n        removeSystem,\n        update,\n      }\n    )\n  );\n}\n\n\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Entity } from './entity';\n\n/** Component specification object */\nexport type ComponentSpec<T> = Omit<InternalComponentSpec<T>, \"id\">;\n\n/** Internal component specification object */\ninterface InternalComponentSpec<T> {\n  id: bigint,\n  name: string,\n  properties: T,\n}\n\nexport interface Component<T> {\n  id: Readonly<bigint>,\n  name: Readonly<string>,\n  entities: Readonly<Entity[]>,\n  properties: T,\n  /** Check if an entity is associated with this category */\n  hasEntity(entity: Entity): boolean\n  /** @hidden */\n  _addEntity(entity: Entity): void,\n  /** @hidden */\n  _removeEntity(entity: Entity): void,\n}\n\n/**\n * Creates a new component object\n * @param spec the components specification object\n */\nexport function _createComponent<T>(spec: InternalComponentSpec<T>): Component<T> {\n  const { id, name, properties } = spec;\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  const { entities } = { entities: new Set() as Set<Entity> };\n\n  const getters = {\n    get id(): bigint {\n      return id;\n    },\n\n    get name(): string {\n      return name;\n    },\n\n    /** @returns an array of entities associated with this component */\n    get entities(): Entity[] {\n      return Array.from(entities);\n    },\n\n    /** @returns the default properties of this component */\n    get properties(): T {\n      return properties;\n    }\n  };\n\n  /**\n   * @hidden\n   * Associate an entity with this component\n   * @param entity the entity to associate\n   * @returns this component\n   */\n  const _addEntity = function(entity: Entity): void {\n    entities.add(entity);\n  };\n\n  /**\n   * @hidden\n   * Disassociate an entity from this component\n   * @param entity the entity to disassociate\n   * @returns this component\n   */\n  const _removeEntity = function(entity: Entity): void {\n    entities.delete(entity);\n  };\n\n  const hasEntity = function(entity: Entity): boolean {\n    return entities.has(entity);\n  };\n\n  return Object.freeze(\n    Object.assign(\n      getters,\n      {\n        hasEntity,\n        _addEntity,\n        _removeEntity,\n      }\n    )\n  );\n}\n\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component } from './component';\nimport { Entity } from './entity';\nimport { createMask } from './mask';\n\nexport type SystemSpec = Omit<InternalSystemSpec, \"id\">;\n\ninterface InternalSystemSpec {\n  id: bigint,\n  system: (dt: number, entities: Entity[]) => void,\n  components: Component<unknown>[],\n}\n\nexport type System = Readonly<{\n  archetype: bigint,\n  enabled: boolean,\n  id: bigint,\n  enable(): void,\n  disable(): void,\n  update(dt: number, entities: Entity[]): void,\n}>;\n\nexport function _createSystem(spec: InternalSystemSpec): System {\n  const { id, system, components } = spec;\n\n  const { archetype } = { archetype: createMask(0n) };\n  let { enabled } = { enabled: false };\n\n  components.forEach((component) => archetype.set(component.id));\n\n  const getters = {\n    get id(): bigint {\n      return id;\n    },\n\n    get archetype(): bigint {\n      return archetype.value;\n    },\n\n    get enabled(): boolean {\n      return enabled;\n    },\n  };\n\n  const enable = function(): void {\n    enabled = true;\n  };\n\n  const disable = function(): void {\n    enabled = false;\n  };\n\n  const update = function(dt: number, entities: Entity[]): void {\n    system(dt, entities);\n  };\n\n  return Object.freeze(\n    Object.assign(\n      getters,\n      {\n        enable,\n        disable,\n        update,\n      }\n    )\n  );\n}\n"],"names":["createMask","n","BigInt","mask","getters","value","Object","freeze","assign","has","Boolean","set","test","toggle","toString","unset","_destroyEntity","entity","_destroy","_createEntity","archetype","components","componentObjects","Set","_id","data","create","get","id","_removeComponent","component","name","delete","forEach","_setId","_addComponent","properties","add","hasComponent","_createPool","spec","initialSize","destroy","pool","i","push","length","pop","release","obj","createWorld","initialPoolSize","maxComponents","archetypes","entities","systems","entityPool","Map","componentCount","entityCount","systemCount","addEntityToArchetypeArray","includes","removeEntityFromArchetypeArray","idx","indexOf","splice","Array","from","values","createEntity","removeEntity","b","createComponent","Error","_createComponent","hasEntity","_addEntity","_removeEntity","removeComponent","addComponentsToEntity","removeComponentsFromEntity","createSystem","system","_createSystem","enabled","enable","disable","update","dt","removeSystem"],"mappings":"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"}