{"version":3,"file":"index.min.js","sources":["../../src/mask.ts","../../src/utils.ts","../../src/component/component_manager.ts","../../src/component/component.ts","../../src/entity/entity.ts","../../src/entity/entity_pool.ts","../../src/entity/entity_manager.ts","../../src/system/system_manager.ts","../../src/system/system.ts","../../src/world.ts"],"sourcesContent":["// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nexport interface Mask {\n  clear: () => void;\n  has: (bit: bigint | number) => boolean;\n  on: (bit: bigint | number) => bigint;\n  off: (bit: bigint | number) => bigint;\n  set: (bit: bigint | number, value: boolean) => bigint;\n  isOn: (bit: bigint | number) => boolean;\n  toggle: (bit: bigint | number) => bigint;\n  toArray: () => number[];\n  toString: () => string;\n  toNumber: () => number;\n  value: () => bigint;\n}\n\nexport function createMask(n: bigint | number = 0n): Mask {\n  if (typeof n === 'number') n = BigInt(n);\n\n  let _mask = 1n << n;\n\n  const value = () => _mask;\n\n  const clear = (): void => {\n    _mask = 1n << 0n;\n  };\n\n  const has = function(bit: bigint | number): boolean {\n    if (typeof bit === 'number') {\n      bit = BigInt(bit);\n    }\n    return ((_mask & bit) === _mask) ? true : false;\n  };\n\n  const off = (bit: bigint | number): bigint => {\n    if (typeof bit === 'number') {\n      bit = BigInt(bit);\n    }\n    _mask &= ~(1n << bit);\n    return _mask;\n  };\n\n  const on = (bit: bigint | number): bigint => {\n    if (typeof bit === 'number') {\n      bit = BigInt(bit);\n    }\n    _mask |= (1n << bit);\n    return _mask;\n  };\n\n  const set = (bit: bigint | number, value: boolean): bigint => {\n    if (value === true) {\n      return on(bit);\n    } else {\n      return off(bit);\n    }\n  };\n\n  const isOn = (bit: bigint | number): boolean => {\n    if (typeof bit === 'number') {\n      bit = BigInt(bit);\n    }\n    return ((_mask & (1n << bit)) !== 0n) ? true : false;\n  };\n\n  const toggle = (bit: bigint | number): bigint => {\n    if (typeof bit === 'number') {\n      bit = BigInt(bit);\n    }\n    _mask ^= (1n << bit);\n    return _mask;\n  };\n\n  const toString = (): string => _mask.toString(2);\n\n  const toNumber = (): number => Number(_mask);\n\n  const toArray = (): number[] => _mask.toString(2).split(\"\").map((n) => parseInt(n, 10));\n\n  return Object.freeze({\n    clear,\n    has,\n    on,\n    off,\n    set,\n    isOn,\n    toggle,\n    toArray,\n    toString,\n    toNumber,\n    value,\n  });\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component } from './component/component';\nimport { createMask } from './mask';\n\nexport type DisallowedKeys =\n    \"constructor\" |\n    \"hasOwnProperty\" |\n    \"isPrototypeOf\" |\n    \"propertyIsEnumerable\" |\n    \"prototype\" |\n    \"toLocaleString\" |\n    \"toString\" |\n    \"valueOf\" |\n    \"__defineGetter__\" |\n    \"__defineSetter__\" |\n    \"__lookupGetter__\" |\n    \"__lookupGetter__\" |\n    \"piss\" |\n    \"__proto__\";\n\n// eslint-disable-next-line max-len\nexport type RestrictedObject<T extends unknown> = Pick<T, Exclude<keyof T, DisallowedKeys>>;\n\n/** @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign */\nexport function deepAssign<T>(target: T, ...sources: T[]): T {\n  const lSources = sources.length;\n  if (!sources || !lSources) return target;\n\n  const descriptors: Record<string | number | symbol, PropertyDescriptor> = {};\n\n  for (let i = 0; i < lSources; i++) {\n    const source = sources[i];\n    // keys\n    const keys = Object.keys(source);\n    const lKeys = keys.length;\n    for (let j = 0; j < lKeys; j++) {\n      const key = keys[j];\n      const descriptor = Object.getOwnPropertyDescriptor(source, key);\n      if (descriptor && descriptor.enumerable) {\n        descriptors[key] = descriptor;\n      }\n    }\n    // symbols\n    const symbols = Object.getOwnPropertySymbols(source);\n    for (let j = 0; j < symbols.length; j++) {\n      const symbol = symbols[j];\n      const descriptor = Object.getOwnPropertyDescriptor(source, symbol);\n      if (descriptor && descriptor.enumerable) {\n        descriptors[symbol as unknown as string] = descriptor;\n      }\n    }\n  }\n  Object.defineProperties(target, descriptors);\n  return target;\n}\n\nexport function componentsToArchetype<T>(...components: Component<T>[]): bigint {\n  const archetype = createMask();\n  components.forEach((component) => archetype.on(component.id));\n  return archetype.value();\n}\n\nexport function generateId(): string {\n  return Date.now().toString(36) + '_' + Math.random().toString(36).substr(2, 9);\n}\n\nexport function clearObject(obj: Record<string, unknown>): Record<string, unknown> {\n  Object.keys(obj).forEach((key) => delete obj[key]);\n  return obj;\n}\n\nexport function clearArray<T>(arr: Array<T>): Array<T> {\n  arr.length = 0;\n  return arr;\n}","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component, ComponentSpec, createComponent as _createComponent } from './component';\n\nexport interface ComponentManagerSpec {\n  maxComponents: number,\n}\n\nexport interface ComponentManger {\n  registerComponent: <T>(spec: ComponentSpec<T>) => Component<T>;\n  unregisterComponent: <T>(component: Component<T>) => ComponentSpec<T>;\n  isComponentRegistered: <T>(component: Component<T>) => boolean,\n  getComponentByName: (name: string) => Component<unknown> | undefined;\n  getComponentById: (id: number) => Component<unknown> | undefined;\n  getComponents: () => Component<unknown>[];\n}\n\nexport function createComponentManager(spec: ComponentManagerSpec): ComponentManger {\n  const { maxComponents } = { ...spec };\n\n  const _registry: Record<string, Component<unknown>> = {};\n  const _freeIds: number[] = [];\n  let _n = 0;\n\n  // initialize _freeIds array\n  let _count = 0;\n  for (let i = maxComponents; i >= 0; i--) {\n    _freeIds[i] = _count++;\n  }\n\n  const registerComponent = <T>(spec: ComponentSpec<T>): Component<T> => {\n    if (_n >= maxComponents) {\n      throw new Error('maximum components reached!');\n    }\n    if (spec.name in _registry) {\n      throw new Error(`component with name \"${spec.name}\" already registered!`);\n    }\n    const id = _freeIds.pop();\n    if (id === undefined) {\n      throw new Error('no available ids!');\n    }\n    const component = _createComponent({...spec, id});\n    _registry[component.name] = component;\n    _n++;\n    return component;\n  };\n\n  const unregisterComponent = <T>(component: Component<T>): ComponentSpec<T> => {\n    if (!(component.name in _registry)) {\n      throw new Error(`component \"${component.name}\" is not registered.`);\n    }\n    delete _registry[component.name];\n    _freeIds.unshift(component.id);\n    const spec = Object.create(component) as Partial<{ -readonly [P in keyof Component<T>]: Component<T>[P] }>;\n    delete spec.id;\n    _n--;\n    return spec as ComponentSpec<T>;\n  };\n\n  const getComponentByName = (name: string): Component<unknown> | undefined => {\n    return _registry[name];\n  };\n\n  const getComponentById = (id: number | bigint): Component<unknown> | undefined => {\n    if (typeof id === 'number') id = BigInt(id);\n    return Object.values(_registry).find((component) => component.id === id);\n  };\n\n  const getComponents = (): Component<unknown>[] => Object.values(_registry);\n\n  const isComponentRegistered = <T>(component: Component<T>): boolean => (component.name in _registry);\n\n  return Object.freeze({\n    registerComponent,\n    unregisterComponent,\n    isComponentRegistered,\n    getComponentByName,\n    getComponentById,\n    getComponents,\n  });\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { deepAssign } from \"../utils\";\n\nexport type InternalComponentSpec<T> = ComponentSpec<T> & { id: number };\n\nexport interface ComponentSpec<T> {\n  entityLimit?: number | null;\n  name: string;\n  properties: T;\n  removable?: boolean,\n}\n\nexport type Component<T> = Readonly<{\n  entityLimit: number | null;\n  id: number,\n  name: string;\n  properties: T;\n  removable: boolean,\n}>\n\nexport function createComponent<T>(spec: InternalComponentSpec<T>): Component<T> {\n  const {\n    entityLimit = null,\n    id,\n    name,\n    properties,\n    removable = true,\n  } = { ...spec };\n\n  // check all required data is present\n  if (!name || !properties || typeof properties !== 'object' || id == null) {\n    throw new Error('malformed component.');\n  }\n\n  // clone and seal properties object\n  deepAssign(properties, spec.properties);\n  Object.seal(properties);\n\n  return Object.freeze(\n    Object.create(null, {\n      entityLimit: {\n        value: entityLimit,\n        enumerable: true,\n      },\n      id: {\n        value: id,\n        enumerable: true,\n      },\n      name: {\n        value: name,\n        enumerable: true,\n      },\n      properties: {\n        value: properties,\n        enumerable: true,\n      },\n      removable: {\n        value: removable,\n        enumerable: true,\n      }\n    })\n  ) as Component<T>;\n}\n","\"use strict\";\n\nimport { Component } from '../component/component';\nimport { createMask } from '../mask';\nimport { clearObject, deepAssign } from '../utils';\n\nexport type Entity = Readonly<{\n  _: Record<string, unknown>;\n  addComponent: <T>(component: Component<T>) => boolean;\n  getArchetype: () => bigint;\n  hasComponent: <T>(component: Component<T>) => boolean;\n  id: string;\n  isAwake: () => boolean;\n  next: (next?: Entity | null) => Entity | null;\n  purge: () => void;\n  removeComponent: <T>(component: Component<T>) => boolean;\n  sleep: () => void;\n  wake: () => void;\n}>\n\nexport function createEntity(): Entity {\n  const _archetype = createMask();\n  const _id = Date.now().toString(36) + '_' + Math.random().toString(36).substr(2, 9);\n  const _properties = {} as Record<string, unknown>;\n\n  let _awake = true;\n  let _next: Entity | null = null;\n\n  const entity = Object.create({}, {\n    _: {\n      value: _properties,\n      enumerable: true,\n    },\n    addComponent: {\n      value: <T>(component: Component<T>): boolean => {\n        /** @todo validation */\n        if (component.name in _properties) {\n          console.warn(`Entity \"${_id}\" already has component \"${component.name}\".`);\n          return false;\n        }\n        try {\n          _properties[component.name] = deepAssign({}, component.properties);\n          _archetype.on(component.id);\n        } catch (err) {\n          console.warn(`Error adding component \"${component.name}\" to entity \"${_id}\".`, err);\n          return false;\n        }\n        return true;\n      },\n    },\n    getArchetype: {\n      value: (): bigint => _archetype.value(),\n    },\n    hasComponent: {\n      value: <T>(component: Component<T> | string): boolean => {\n        return ((typeof component === \"string\") ? component in _properties : component.name in _properties) ?? false;\n      },\n    },\n    isAwake: {\n      value: (): boolean => _awake,\n    },\n    id: {\n      value: _id,\n      enumerable: true,\n    },\n    next: {\n      value: (next?: Entity | null): Entity | null => {\n        if (next !== undefined) {\n          _next = next;\n        }\n        return _next;\n      }\n    },\n    purge: {\n      value: (): void => {\n        clearObject(_properties);\n        _archetype.clear();\n      },\n    },\n    removeComponent: {\n      value: <T>(component: Component<T>): boolean => {\n        /** @todo validation */\n        if (!(component.name in _properties)) return false;\n        delete _properties[component.name];\n        _archetype.off(component.id);\n        return true;\n      },\n    },\n    sleep: {\n      value: (): boolean => _awake = false,\n    },\n    wake: {\n      value: (): boolean => _awake = true,\n    },\n  }) as Entity;\n\n  return Object.freeze(entity);\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Entity, createEntity } from './entity';\n\nexport interface EntityPoolSpec {\n  initialPoolSize: number;\n  maxEntities: number;\n}\n\nexport interface EntityPool {\n  flush: () => void;\n  get: () => Entity | null;\n  release: (entity: Entity) => void;\n}\n\nexport function createPool(spec: EntityPoolSpec): EntityPool {\n  const { initialPoolSize, maxEntities } = { ...spec };\n\n  const _pool: Entity[] = [];\n  let _firstAvailable: Entity | null;\n\n  const _create = (n = 1): void => {\n    for (let i = n; i >= 0; i--) {\n      if (_pool.length >= maxEntities) {\n        throw new Error('The entity pool is full.');\n      }\n      const entity = createEntity();\n      entity.next(_firstAvailable);\n      _firstAvailable = entity;\n      _pool.push(entity);\n    }\n  };\n\n  const flush = (): void => {\n    _pool.length = 0;\n    _firstAvailable = null;\n    _create(initialPoolSize);\n  };\n\n  const get = (): Entity | null => {\n    if (!_firstAvailable) _create(initialPoolSize * 0.25);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const entity = _firstAvailable!;\n    _firstAvailable = entity.next();\n    return entity;\n  };\n\n  const release = (entity: Entity): void => {\n    entity.purge();\n    entity.next(_firstAvailable);\n    _firstAvailable = entity;\n  };\n\n  flush();\n\n  return Object.freeze({\n    flush,\n    get,\n    release,\n  });\n}","\"use strict\";\n\nimport { Component } from '../component/component';\nimport { componentsToArchetype } from '../utils';\nimport { Entity } from './entity';\nimport { EntityPool, createPool } from \"./entity_pool\";\n\nexport interface EntityManagerSpec {\n  initialPoolSize: number;\n  maxEntities: number;\n}\n\nexport interface EntityManager {\n  createEntity: () => Entity;\n  destroyEntity: (entity: Entity) => boolean;\n  getEntityById: (id: string) => Entity | undefined;\n  getEntities: () => Entity[];\n  getEntitiesByComponents: (...components: Component<unknown>[]) => Entity[];\n  getEntitiesByMask: (mask: bigint, exact?: boolean) => Entity[];\n  rebuildArchetypes: () => void;\n  updateArchetype: (entity: Entity, previous?: bigint) => Entity;\n  areArchetypesDirty: () => boolean;\n  cleanedArchetypes: () => boolean;\n}\n\nexport function createEntityManager(spec: EntityManagerSpec): EntityManager {\n  const { initialPoolSize, maxEntities } = { ...spec };\n  const _pool: EntityPool = createPool({initialPoolSize, maxEntities});\n  const _registry: Record<string, Entity> = {};\n\n  // archetypes\n  const _archetypes: Map<bigint, Set<Entity>> = new Map() as Map<bigint, Set<Entity>>;\n  let _dirty = true;\n\n  const createEntity = (): Entity => {\n    const entity = _pool.get();\n    if (!entity) throw new Error('no entities left!');\n    _registry[entity.id] = entity;\n    updateArchetype(entity);\n    return entity;\n  };\n\n  const destroyEntity = (entity: Entity): boolean => {\n    const success = (entity.id in _registry);\n    if (success === true) {\n      delete _registry[entity.id];\n      const archetype = entity.getArchetype();\n      _archetypes.get(archetype)?.delete(entity);\n      if (_archetypes.get(archetype)?.size === 0) {\n        _archetypes.delete(archetype);\n        _dirty = true;\n      }\n      _pool.release(entity);\n    }\n    return success;\n  };\n\n  const getEntityById = (id: string): Entity | undefined => _registry[id];\n\n  const getEntities = (): Entity[] => Object.values(_registry);\n\n  const getEntitiesByComponents = (...components: Component<unknown>[]): Entity[] => {\n    const mask = componentsToArchetype(...components);\n    return getEntitiesByMask(mask);\n  };\n\n  const getEntitiesByMask = (mask: bigint, exact = false): Entity[] => {\n    if (exact) {\n      return Array.from(_archetypes.get(mask) ?? []);\n    } else {\n      const _entities: Set<Entity> = new Set();\n      if (_dirty === true) {\n        _archetypes.forEach((entities, archetype) => {\n          if ((archetype & mask) === mask) {\n            entities.forEach((entity) => _entities.add(entity));\n          }\n        });\n      } else {\n        _archetypes.forEach((entities, archetype) => {\n          if ((archetype & mask) === mask) {\n            entities.forEach((entity) => _entities.add(entity));\n          }\n        });\n      }\n      return [..._entities];\n    }\n  };\n\n  const updateArchetype = (entity: Entity, previous?: bigint): Entity => {\n    if (previous != undefined) {\n      _archetypes.get(previous)?.delete(entity);\n    }\n    const archetype = entity.getArchetype();\n    if (_archetypes.has(archetype)) {\n      _archetypes.get(archetype)?.add(entity);\n    } else {\n      _archetypes.set(archetype, new Set([entity]));\n      _dirty = true;\n    }\n    return entity;\n  };\n\n  const rebuildArchetypes = (): void => {\n    _archetypes.clear();\n    const entities = getEntities();\n    for (let i = 0; i < entities.length; i++) {\n      updateArchetype(entities[i]);\n    }\n    _dirty = false;\n  };\n\n  const areArchetypesDirty = (): boolean => _dirty;\n\n  const cleanedArchetypes = (): boolean => _dirty = false;\n\n  return Object.freeze({\n    createEntity,\n    destroyEntity,\n    getEntityById,\n    getEntities,\n    getEntitiesByComponents,\n    getEntitiesByMask,\n    rebuildArchetypes,\n    updateArchetype,\n    areArchetypesDirty,\n    cleanedArchetypes,\n  });\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { createSystem, System, SystemSpec } from './system';\n\nexport interface SystemManager {\n    registerSystem: (spec: SystemSpec, idx?: number | undefined) => System;\n    unregisterSystem: (system: System) => void;\n    moveSystem: (system: System, index: number) => boolean;\n    isSystemRegistered: (system: System) => boolean;\n    getSystemByName: (name: string) => System | undefined;\n    getSystemByIndex: (index: number) => System | undefined;\n    getSystems: () => System[];\n}\n\nexport function createSystemManager(): SystemManager {\n  const _registry: Record<string, System> = {};\n  const _executionOrder: System[] = [];\n\n  const registerSystem = (spec: SystemSpec, idx?: number): System => {\n    if (spec.name in _registry) {\n      throw new Error(`system \"${spec.name}\" is already registered!`);\n    }\n    const system = createSystem({...spec});\n    if (idx !== undefined) {\n      _executionOrder.splice(idx, 0, system);\n    } else {\n      _executionOrder.push(system);\n    }\n    _registry[system.name] = system;\n    return system;\n  };\n\n  const unregisterSystem = (system: System): void => {\n    if (!(system.name in _registry)) {\n      throw new Error(`system \"${system.name}\" is not registered!`);\n    }\n    delete _registry[system.name];\n    _executionOrder.splice(_executionOrder.indexOf(system), 1);\n  };\n\n  const moveSystem = (system: System, index: number): boolean => {\n    const idx = _executionOrder.indexOf(system);\n    if (idx === -1) return false;\n    _executionOrder.splice(idx, 1);\n    _executionOrder.splice(index, 0, system);\n    return true;\n  };\n\n  const getSystemByName = (name: string): System | undefined => _registry[name];\n\n  const getSystemByIndex = (index: number): System | undefined => _executionOrder[index] ?? undefined;\n\n  const getSystems = (): System[] => [..._executionOrder];\n\n  const isSystemRegistered = (system: System): boolean => system.name in _registry;\n\n  return Object.freeze({\n    registerSystem,\n    unregisterSystem,\n    moveSystem,\n    isSystemRegistered,\n    getSystemByName,\n    getSystemByIndex,\n    getSystems,\n  });\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Entity } from '../entity/entity';\nimport { Component } from '../component/component';\nimport { createMask } from '../mask';\n\nexport type System = Readonly<{\n  archetype: bigint;\n  enabled: boolean;\n  exclusive: boolean;\n  name: string;\n  enable: () => void;\n  disable: () => void;\n  preUpdate: (entities: Entity[], system: System) => void;\n  update: (dt: number, entities: Entity[], system: System) => void;\n  postUpdate: (int: number, entities: Entity[], system: System) => void;\n}>\n\nexport interface SystemSpec {\n  components: Component<unknown>[];\n  exclusive?: boolean;\n  name: string;\n  update?: (dt: number, entities: Entity[], system: System) => void;\n  postUpdate?: (int: number, entity: Entity[], system: System) => void;\n  preUpdate?: (entities: Entity[], system: System) => void;\n}\n\nexport function createSystem(spec: SystemSpec): System {\n  const {\n    components,\n    exclusive = false,\n    name,\n    update = (() => void 0),\n    postUpdate = (() => void 0),\n    preUpdate = (() => void 0),\n  } = { ...spec };\n\n  const _archetype = components.reduce((archetype, component) => {\n    archetype.on(component.id);\n    return archetype;\n  }, createMask()).value();\n\n  let _enabled = false;\n\n  const enable = (): void => {\n    _enabled = true;\n  };\n\n  const disable = (): void => {\n    _enabled = false;\n  };\n\n  return Object.freeze({\n    archetype: _archetype,\n    exclusive,\n    name,\n    get enabled(): boolean {\n      return _enabled;\n    },\n    disable,\n    enable,\n    preUpdate,\n    update,\n    postUpdate,\n  });\n}","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component, ComponentSpec } from './component/component';\nimport { createComponentManager } from './component/component_manager';\nimport { Entity } from './entity/entity';\nimport { createEntityManager } from './entity/entity_manager';\nimport { System, SystemSpec } from './system/system';\nimport { createSystemManager } from './system/system_manager';\n\nexport interface WorldSpec {\n  initialPoolSize?: number;\n  maxComponents?: number;\n  maxEntities?: number;\n}\n\nexport type World = Readonly<{\n  entity: Entity;\n  createEntity: () => Entity;\n  destroyEntity: (entity: Entity) => boolean;\n  addComponentsToEntity: (entity: Entity, ...components: Component<unknown>[]) => Entity;\n  removeComponentsFromEntity: (entity: Entity, ...components: Component<unknown>[]) => Entity;\n  getEntities: () => Entity[];\n  getComponents: () => Component<unknown>[];\n  getSystems: () => System[];\n  getComponentById: (id: number) => Component<unknown> | undefined;\n  getComponentByName: (name: string) => Component<unknown> | undefined;\n  getEntitiesByComponents: (...components: Component<unknown>[]) => Entity[];\n  getEntityById: (id: string) => Entity | undefined;\n  getSystemByIndex: (index: number) => System | undefined;\n  getSystemByName: (name: string) => System | undefined;\n  isComponentRegistered: <T>(component: Component<T>) => boolean;\n  isSystemRegistered: (system: System) => boolean;\n  moveSystem: (system: System, idx: number) => boolean;\n  registerComponent: <T>(spec: ComponentSpec<T>) => Component<T>;\n  registerSystem: (spec: SystemSpec) => System;\n  unregisterComponent: <T>(component: Component<T>) => ComponentSpec<T>;\n  unregisterSystem: (system: System) => void;\n  preUpdate: () => void;\n  update: (dt: number) => void;\n  postUpdate: (int: number) => void;\n}>\n\nexport function createWorld(spec: WorldSpec): World {\n  // Spec\n  const {\n    initialPoolSize = 64,\n    maxComponents = 1024,\n    maxEntities = 100000,\n  } = { ...spec };\n\n  let _isFirstRun = false;\n\n  // Entity\n  const {\n    createEntity,\n    destroyEntity,\n    getEntityById,\n    getEntities,\n    getEntitiesByMask,\n    getEntitiesByComponents,\n    rebuildArchetypes,\n    updateArchetype,\n    areArchetypesDirty,\n    cleanedArchetypes,\n  } = createEntityManager({\n    initialPoolSize,\n    maxEntities,\n  });\n\n  // Component\n  const {\n    registerComponent,\n    unregisterComponent,\n    isComponentRegistered,\n    getComponentByName,\n    getComponentById,\n    getComponents,\n  } = createComponentManager({\n    maxComponents,\n  });\n\n  // System\n  const {\n    registerSystem,\n    unregisterSystem,\n    getSystemByName,\n    getSystemByIndex,\n    getSystems,\n    moveSystem,\n    isSystemRegistered,\n  } = createSystemManager();\n\n  // world.entity Initialization\n  const worldEntity = createEntity();\n  const worldComponent = registerComponent<{ isWorld: boolean }>({\n    name: \"world\",\n    properties: {\n      isWorld: true,\n    },\n    entityLimit: 1,\n    removable: false,\n  });\n\n  const _systemEntities: Record<string, Entity[]> = {};\n\n  // Public methods\n  const addComponentsToEntity = (entity: Entity, ...components: (Component<unknown> | string)[]): Entity => {\n    if (!entity) {\n      throw new Error('no entity provided.');\n    }\n    if (!components?.length) {\n      throw new Error('no components provided.');\n    }\n    const len = components.length;\n    let i: number;\n    for (i = 0; i < len; i++) {\n      let component: Component<unknown> | undefined;\n      if (typeof components[i] === 'string') {\n        component = getComponentByName(components[i] as string);\n      } else {\n        component = components[i] as Component<unknown>;\n      }\n      if (!component) {\n        throw new Error(`component ${components[i] as string} is not registered!.`);\n      }\n      if (!entity.hasComponent(component)) {\n        const previousArchetype = entity.getArchetype();\n        entity.addComponent(component);\n        updateArchetype(entity, previousArchetype);\n      }\n    }\n    return entity;\n  };\n\n  const removeComponentsFromEntity = (entity: Entity, ...components: (Component<unknown> | string)[]): Entity => {\n    if (!entity) {\n      throw new Error('no entity provided.');\n    }\n    if (!components?.length) {\n      throw new Error('no components provided.');\n    }\n    const len = components.length;\n    let i: number;\n    for (i = 0; i < len; i++) {\n      let component: Component<unknown> | undefined;\n      if (typeof components[i] === 'string') {\n        component = getComponentByName(components[i] as string);\n      } else {\n        component = components[i] as Component<unknown>;\n      }\n      if (!component) {\n        throw new Error(`component ${components[i] as string}  is not registered.`);\n      }\n      if (entity.hasComponent(component)) {\n        const previousArchetype = entity.getArchetype();\n        entity.removeComponent(component);\n        updateArchetype(entity, previousArchetype);\n      }\n    }\n    return entity;\n  };\n\n  const preUpdate = (): void => {\n    if (_isFirstRun) {\n      rebuildArchetypes();\n      _isFirstRun = false;\n    }\n    const systems = getSystems();\n    for (let i = 0; i < systems.length; i++) {\n      const system = systems[i];\n      if (system.enabled === false) continue;\n      if (areArchetypesDirty() === true) {\n        const entities = getEntitiesByMask(system.archetype, system.exclusive);\n        _systemEntities[system.name] = entities;\n        system.preUpdate(entities, system);\n      } else {\n        system.preUpdate(_systemEntities[system.name], system);\n      }\n     }\n     cleanedArchetypes();\n  };\n\n  const update = (dt: number): void => {\n    if (_isFirstRun) {\n      rebuildArchetypes();\n      _isFirstRun = false;\n    }\n    const systems = getSystems();\n    for (let i = 0; i < systems.length; i++) {\n      const system = systems[i];\n      if (system.enabled === false) continue;\n      if (areArchetypesDirty() === true) {\n        const entities = getEntitiesByMask(system.archetype, system.exclusive);\n        _systemEntities[system.name] = entities;\n        system.update(dt, entities, system);\n      } else {\n        system.update(dt, _systemEntities[system.name], system);\n      }\n    }\n    cleanedArchetypes();\n  };\n\n  const postUpdate = (int: number): void => {\n    if (_isFirstRun) {\n      rebuildArchetypes();\n      _isFirstRun = false;\n    }\n    const systems = getSystems();\n    for (let i = 0; i < systems.length; i++) {\n      const system = systems[i];\n      if (system.enabled === false) continue;\n      if (areArchetypesDirty() === true) {\n        const entities = getEntitiesByMask(system.archetype, system.exclusive);\n        _systemEntities[system.name] = entities;\n        system.postUpdate(int, entities, system);\n      } else {\n        system.postUpdate(int, _systemEntities[system.name], system);\n      }\n    }\n    cleanedArchetypes();\n  };\n\n  // finalizations\n  addComponentsToEntity(worldEntity, worldComponent);\n  rebuildArchetypes();\n\n  return Object.freeze({\n    entity: worldEntity,\n    getComponents,\n    getEntities,\n    getSystems,\n    createEntity,\n    destroyEntity,\n    addComponentsToEntity,\n    removeComponentsFromEntity,\n    getComponentById,\n    getComponentByName,\n    getEntitiesByComponents,\n    getEntityById,\n    getEntitiesByMask,\n    getSystemByIndex,\n    getSystemByName,\n    isComponentRegistered,\n    isSystemRegistered,\n    moveSystem,\n    registerComponent,\n    registerSystem,\n    unregisterComponent,\n    unregisterSystem,\n    preUpdate,\n    update,\n    postUpdate,\n  });\n}"],"names":["createMask","n","BigInt","_mask","off","bit","on","Object","freeze","clear","has","set","value","isOn","toggle","toArray","toString","split","map","parseInt","toNumber","Number","deepAssign","target","sources","lSources","length","descriptors","i","source","keys","lKeys","j","key","descriptor","getOwnPropertyDescriptor","enumerable","symbols","getOwnPropertySymbols","symbol","defineProperties","createComponentManager","spec","maxComponents","_registry","_freeIds","_n","_count","registerComponent","Error","name","id","pop","undefined","component","createComponent","entityLimit","properties","removable","seal","create","_createComponent","unregisterComponent","unshift","isComponentRegistered","getComponentByName","getComponentById","values","find","getComponents","createEntity","_archetype","_id","Date","now","Math","random","substr","_properties","_awake","_next","entity","_","addComponent","console","warn","err","getArchetype","hasComponent","isAwake","next","purge","clearObject","obj","forEach","removeComponent","sleep","wake","createPool","initialPoolSize","maxEntities","_pool","_firstAvailable","_create","push","flush","get","release","createEntityManager","_archetypes","Map","_dirty","getEntities","getEntitiesByMask","mask","exact","Array","from","_entities","Set","entities","archetype","add","updateArchetype","previous","delete","destroyEntity","success","size","getEntityById","getEntitiesByComponents","components","componentsToArchetype","rebuildArchetypes","areArchetypesDirty","cleanedArchetypes","createSystemManager","_executionOrder","registerSystem","idx","system","createSystem","exclusive","update","postUpdate","preUpdate","reduce","_enabled","enabled","disable","enable","splice","unregisterSystem","indexOf","moveSystem","index","isSystemRegistered","getSystemByName","getSystemByIndex","getSystems","createWorld","worldEntity","worldComponent","isWorld","_systemEntities","addComponentsToEntity","len","previousArchetype","removeComponentsFromEntity","systems","dt","int"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;sBAiBgBA,WAAWC,EAAqB,IAC7B,iBAANA,IAAgBA,EAAIC,OAAOD,IAEtC,IAAIE,EAAQ,IAAMF,EAElB,MAaMG,IAAOC,IACQ,iBAARA,IACTA,EAAMH,OAAOG,IAEfF,KAAW,IAAME,GACVF,GAGHG,GAAMD,IACS,iBAARA,IACTA,EAAMH,OAAOG,IAEfF,GAAU,IAAME,EACTF,GAgCT,OAAOI,OAAOC,OAAO,CACnBC,MAzDY,KACZN,EAAQ,IAAM,IAyDdO,IAtDU,SAASL,GAInB,MAHmB,iBAARA,IACTA,EAAMH,OAAOG,KAENF,EAAQE,KAASF,GAmD1BG,GAAAA,GACAF,IAAAA,IACAO,IAlCU,CAACN,EAAsBO,KACnB,IAAVA,EACKN,GAAGD,GAEHD,IAAIC,GA+BbQ,KA3BYR,IACO,iBAARA,IACTA,EAAMH,OAAOG,IAEmB,MAAzBF,EAAS,IAAME,IAwBxBS,OArBcT,IACK,iBAARA,IACTA,EAAMH,OAAOG,IAEfF,GAAU,IAAME,EACTF,GAiBPY,QAVc,IAAgBZ,EAAMa,SAAS,GAAGC,MAAM,IAAIC,KAAKjB,GAAMkB,SAASlB,EAAG,MAWjFe,SAfe,IAAcb,EAAMa,SAAS,GAgB5CI,SAde,IAAcC,OAAOlB,GAepCS,MArEY,IAAMT,aCINmB,WAAcC,KAAcC,GAC1C,MAAMC,EAAWD,EAAQE,OACzB,IAAKF,IAAYC,EAAU,OAAOF,EAElC,MAAMI,EAAoE,GAE1E,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAUG,IAAK,CACjC,MAAMC,EAASL,EAAQI,GAEjBE,EAAOvB,OAAOuB,KAAKD,GACnBE,EAAQD,EAAKJ,OACnB,IAAK,IAAIM,EAAI,EAAGA,EAAID,EAAOC,IAAK,CAC9B,MAAMC,EAAMH,EAAKE,GACXE,EAAa3B,OAAO4B,yBAAyBN,EAAQI,GACvDC,GAAcA,EAAWE,aAC3BT,EAAYM,GAAOC,GAIvB,MAAMG,EAAU9B,OAAO+B,sBAAsBT,GAC7C,IAAK,IAAIG,EAAI,EAAGA,EAAIK,EAAQX,OAAQM,IAAK,CACvC,MAAMO,EAASF,EAAQL,GACjBE,EAAa3B,OAAO4B,yBAAyBN,EAAQU,GACvDL,GAAcA,EAAWE,aAC3BT,EAAYY,GAA+BL,IAKjD,OADA3B,OAAOiC,iBAAiBjB,EAAQI,GACzBJ,WCrCOkB,uBAAuBC,GACrC,MAAMC,cAAEA,GAAkB,IAAKD,GAEzBE,EAAgD,GAChDC,EAAqB,GAC3B,IAAIC,EAAK,EAGLC,EAAS,EACb,IAAK,IAAInB,EAAIe,EAAef,GAAK,EAAGA,IAClCiB,EAASjB,GAAKmB,IA6ChB,OAAOxC,OAAOC,OAAO,CACnBwC,kBA3C4BN,IAC5B,GAAII,GAAMH,EACR,MAAM,IAAIM,MAAM,+BAElB,GAAIP,EAAKQ,QAAQN,EACf,MAAM,IAAIK,MAAM,wBAAwBP,EAAKQ,6BAE/C,MAAMC,EAAKN,EAASO,MACpB,QAAWC,IAAPF,EACF,MAAM,IAAIF,MAAM,qBAElB,MAAMK,WCpBMC,gBAAmBb,GACjC,MAAMc,YACJA,EAAc,KAAIL,GAClBA,EAAED,KACFA,EAAIO,WACJA,EAAUC,UACVA,GAAY,GACV,IAAKhB,GAGT,IAAKQ,IAASO,GAAoC,iBAAfA,GAAiC,MAANN,EAC5D,MAAM,IAAIF,MAAM,wBAOlB,OAHA3B,WAAWmC,EAAYf,EAAKe,YAC5BlD,OAAOoD,KAAKF,GAELlD,OAAOC,OACZD,OAAOqD,OAAO,KAAM,CAClBJ,YAAa,CACX5C,MAAO4C,EACPpB,YAAY,GAEde,GAAI,CACFvC,MAAOuC,EACPf,YAAY,GAEdc,KAAM,CACJtC,MAAOsC,EACPd,YAAY,GAEdqB,WAAY,CACV7C,MAAO6C,EACPrB,YAAY,GAEdsB,UAAW,CACT9C,MAAO8C,EACPtB,YAAY,MDlBEyB,CAAiB,IAAInB,EAAMS,GAAAA,IAG7C,OAFAP,EAAUU,EAAUJ,MAAQI,EAC5BR,IACOQ,GA8BPQ,oBA3B8BR,IAC9B,KAAMA,EAAUJ,QAAQN,GACtB,MAAM,IAAIK,MAAM,cAAcK,EAAUJ,mCAEnCN,EAAUU,EAAUJ,MAC3BL,EAASkB,QAAQT,EAAUH,IAC3B,MAAMT,EAAOnC,OAAOqD,OAAON,GAG3B,cAFOZ,EAAKS,GACZL,IACOJ,GAmBPsB,sBALgCV,GAAsCA,EAAUJ,QAAQN,EAMxFqB,mBAjB0Bf,GACnBN,EAAUM,GAiBjBgB,iBAdwBf,IACN,iBAAPA,IAAiBA,EAAKjD,OAAOiD,IACjC5C,OAAO4D,OAAOvB,GAAWwB,MAAMd,GAAcA,EAAUH,KAAOA,KAarEkB,cAVoB,IAA4B9D,OAAO4D,OAAOvB,cEjDlD0B,eACd,MAAMC,EAAavE,aACbwE,EAAMC,KAAKC,MAAM1D,SAAS,IAAM,IAAM2D,KAAKC,SAAS5D,SAAS,IAAI6D,OAAO,EAAG,GAC3EC,EAAc,GAEpB,IAAIC,GAAS,EACTC,EAAuB,KAE3B,MAAMC,EAAS1E,OAAOqD,OAAO,GAAI,CAC/BsB,EAAG,CACDtE,MAAOkE,EACP1C,YAAY,GAEd+C,aAAc,CACZvE,MAAW0C,IAET,GAAIA,EAAUJ,QAAQ4B,EAEpB,OADAM,QAAQC,KAAK,WAAWb,6BAA+BlB,EAAUJ,WAC1D,EAET,IACE4B,EAAYxB,EAAUJ,MAAQ5B,WAAW,GAAIgC,EAAUG,YACvDc,EAAWjE,GAAGgD,EAAUH,IACxB,MAAOmC,GAEP,OADAF,QAAQC,KAAK,2BAA2B/B,EAAUJ,oBAAoBsB,MAASc,IACxE,EAET,OAAO,IAGXC,aAAc,CACZ3E,MAAO,IAAc2D,EAAW3D,SAElC4E,aAAc,CACZ5E,MAAW0C,IACqB,iBAAdA,EAA0BA,KAAawB,EAAcxB,EAAUJ,QAAQ4B,KAAgB,GAG3GW,QAAS,CACP7E,MAAO,IAAemE,GAExB5B,GAAI,CACFvC,MAAO4D,EACPpC,YAAY,GAEdsD,KAAM,CACJ9E,MAAQ8E,SACOrC,IAATqC,IACFV,EAAQU,GAEHV,IAGXW,MAAO,CACL/E,MAAO,eHNGgF,YAAYC,GAE1B,OADAtF,OAAOuB,KAAK+D,GAAKC,SAAS7D,UAAe4D,EAAI5D,KACtC4D,EGKDD,CAAYd,GACZP,EAAW9D,UAGfsF,gBAAiB,CACfnF,MAAW0C,GAEHA,EAAUJ,QAAQ4B,WACjBA,EAAYxB,EAAUJ,MAC7BqB,EAAWnE,IAAIkD,EAAUH,KAClB,IAGX6C,MAAO,CACLpF,MAAO,IAAemE,GAAS,GAEjCkB,KAAM,CACJrF,MAAO,IAAemE,GAAS,KAInC,OAAOxE,OAAOC,OAAOyE,YChFPiB,WAAWxD,GACzB,MAAMyD,gBAAEA,EAAeC,YAAEA,GAAgB,IAAK1D,GAExC2D,EAAkB,GACxB,IAAIC,EAEJ,MAAMC,QAAU,CAACtG,EAAI,KACnB,IAAK,IAAI2B,EAAI3B,EAAG2B,GAAK,EAAGA,IAAK,CAC3B,GAAIyE,EAAM3E,QAAU0E,EAClB,MAAM,IAAInD,MAAM,4BAElB,MAAMgC,EAASX,eACfW,EAAOS,KAAKY,GACZA,EAAkBrB,EAClBoB,EAAMG,KAAKvB,KAITwB,MAAQ,KACZJ,EAAM3E,OAAS,EACf4E,EAAkB,KAClBC,QAAQJ,IAmBV,OAFAM,QAEOlG,OAAOC,OAAO,CACnBiG,MAAAA,MACAC,IAlBU,KACLJ,GAAiBC,QAA0B,IAAlBJ,GAE9B,MAAMlB,EAASqB,EAEf,OADAA,EAAkBrB,EAAOS,OAClBT,GAcP0B,QAXe1B,IACfA,EAAOU,QACPV,EAAOS,KAAKY,GACZA,EAAkBrB,cC1BN2B,oBAAoBlE,GAClC,MAAMyD,gBAAEA,EAAeC,YAAEA,GAAgB,IAAK1D,GACxC2D,EAAoBH,WAAW,CAACC,gBAAAA,EAAiBC,YAAAA,IACjDxD,EAAoC,GAGpCiE,EAAwC,IAAIC,IAClD,IAAIC,GAAS,EAEb,MAyBMC,YAAc,IAAgBzG,OAAO4D,OAAOvB,GAO5CqE,kBAAoB,CAACC,EAAcC,GAAQ,KAC/C,GAAIA,EACF,OAAOC,MAAMC,KAAKR,EAAYH,IAAIQ,IAAS,IACtC,CACL,MAAMI,EAAyB,IAAIC,IAcnC,OAZEV,EAAYf,SAAQ,CAAC0B,EAAUC,MACxBA,EAAYP,KAAUA,GACzBM,EAAS1B,SAASb,GAAWqC,EAAUI,IAAIzC,QAU1C,IAAIqC,KAITK,gBAAkB,CAAC1C,EAAgB2C,KACvBvE,MAAZuE,GACFf,EAAYH,IAAIkB,IAAWC,OAAO5C,GAEpC,MAAMwC,EAAYxC,EAAOM,eAOzB,OANIsB,EAAYnG,IAAI+G,GAClBZ,EAAYH,IAAIe,IAAYC,IAAIzC,IAEhC4B,EAAYlG,IAAI8G,EAAW,IAAIF,IAAI,CAACtC,KACpC8B,GAAS,GAEJ9B,GAgBT,OAAO1E,OAAOC,OAAO,CACnB8D,aAlFmB,KACnB,MAAMW,EAASoB,EAAMK,MACrB,IAAKzB,EAAQ,MAAM,IAAIhC,MAAM,qBAG7B,OAFAL,EAAUqC,EAAO9B,IAAM8B,EACvB0C,gBAAgB1C,GACTA,GA8EP6C,cA3EqB7C,IACrB,MAAM8C,EAAW9C,EAAO9B,MAAMP,EAC9B,IAAgB,IAAZmF,EAAkB,QACbnF,EAAUqC,EAAO9B,IACxB,MAAMsE,EAAYxC,EAAOM,eACzBsB,EAAYH,IAAIe,IAAYI,OAAO5C,GACM,IAArC4B,EAAYH,IAAIe,IAAYO,OAC9BnB,EAAYgB,OAAOJ,GACnBV,GAAS,GAEXV,EAAMM,QAAQ1B,GAEhB,OAAO8C,GAgEPE,cA7DqB9E,GAAmCP,EAAUO,GA8DlE6D,YAAAA,YACAkB,wBA3D8B,IAAIC,KAClC,MAAMjB,WLJMkB,yBAA4BD,GAC1C,MAAMV,EAAYzH,aAElB,OADAmI,EAAWrC,SAASxC,GAAcmE,EAAUnH,GAAGgD,EAAUH,MAClDsE,EAAU7G,QKCFwH,IAAyBD,GACtC,OAAOlB,kBAAkBC,IA0DzBD,kBAAAA,kBACAoB,kBApBwB,KACxBxB,EAAYpG,QACZ,MAAM+G,EAAWR,cACjB,IAAK,IAAIpF,EAAI,EAAGA,EAAI4F,EAAS9F,OAAQE,IACnC+F,gBAAgBH,EAAS5F,IAE3BmF,GAAS,GAeTY,gBAAAA,gBACAW,mBAbyB,IAAevB,EAcxCwB,kBAZwB,IAAexB,GAAS,aClGpCyB,sBACd,MAAM5F,EAAoC,GACpC6F,EAA4B,GAwClC,OAAOlI,OAAOC,OAAO,CACnBkI,eAvCqB,CAAChG,EAAkBiG,KACxC,GAAIjG,EAAKQ,QAAQN,EACf,MAAM,IAAIK,MAAM,WAAWP,EAAKQ,gCAElC,MAAM0F,WCKMC,aAAanG,GAC3B,MAAMyF,WACJA,EAAUW,UACVA,GAAY,EAAK5F,KACjBA,EAAI6F,OACJA,WAAuBC,WACvBA,WAA2BC,UAC3BA,YACE,IAAKvG,GAEH6B,EAAa4D,EAAWe,QAAO,CAACzB,EAAWnE,KAC/CmE,EAAUnH,GAAGgD,EAAUH,IAChBsE,IACNzH,cAAcY,QAEjB,IAAIuI,GAAW,EAUf,OAAO5I,OAAOC,OAAO,CACnBiH,UAAWlD,EACXuE,UAAAA,EACA5F,KAAAA,EACAkG,cACE,OAAOD,GAETE,QAXc,KACdF,GAAW,GAWXG,OAhBa,KACbH,GAAW,GAgBXF,UAAAA,EACAF,OAAAA,EACAC,WAAAA,IDzCeH,CAAa,IAAInG,IAOhC,YANYW,IAARsF,EACFF,EAAgBc,OAAOZ,EAAK,EAAGC,GAE/BH,EAAgBjC,KAAKoC,GAEvBhG,EAAUgG,EAAO1F,MAAQ0F,EAClBA,GA6BPY,iBA1BwBZ,IACxB,KAAMA,EAAO1F,QAAQN,GACnB,MAAM,IAAIK,MAAM,WAAW2F,EAAO1F,mCAE7BN,EAAUgG,EAAO1F,MACxBuF,EAAgBc,OAAOd,EAAgBgB,QAAQb,GAAS,IAsBxDc,WAnBiB,CAACd,EAAgBe,KAClC,MAAMhB,EAAMF,EAAgBgB,QAAQb,GACpC,OAAa,IAATD,IACJF,EAAgBc,OAAOZ,EAAK,GAC5BF,EAAgBc,OAAOI,EAAO,EAAGf,IAC1B,IAePgB,mBAN0BhB,GAA4BA,EAAO1F,QAAQN,EAOrEiH,gBAbuB3G,GAAqCN,EAAUM,GActE4G,iBAZwBH,GAAsClB,EAAgBkB,SAAUtG,EAaxF0G,WAXiB,IAAgB,IAAItB,kCEVzBuB,YAAYtH,GAE1B,MAAMyD,gBACJA,EAAkB,GAAExD,cACpBA,EAAgB,KAAIyD,YACpBA,EAAc,KACZ,IAAK1D,IAKH4B,aACJA,EAAYwD,cACZA,EAAaG,cACbA,EAAajB,YACbA,EAAWC,kBACXA,EAAiBiB,wBACjBA,EAAuBG,kBACvBA,EAAiBV,gBACjBA,EAAeW,mBACfA,EAAkBC,kBAClBA,GACE3B,oBAAoB,CACtBT,gBAAAA,EACAC,YAAAA,KAIIpD,kBACJA,EAAiBc,oBACjBA,EAAmBE,sBACnBA,EAAqBC,mBACrBA,EAAkBC,iBAClBA,EAAgBG,cAChBA,GACE5B,uBAAuB,CACzBE,cAAAA,KAII+F,eACJA,EAAcc,iBACdA,EAAgBK,gBAChBA,EAAeC,iBACfA,EAAgBC,WAChBA,EAAUL,WACVA,EAAUE,mBACVA,GACEpB,sBAGEyB,EAAc3F,IACd4F,EAAiBlH,EAAwC,CAC7DE,KAAM,QACNO,WAAY,CACV0G,SAAS,GAEX3G,YAAa,EACbE,WAAW,IAGP0G,EAA4C,GAG5CC,sBAAwB,CAACpF,KAAmBkD,KAChD,IAAKlD,EACH,MAAM,IAAIhC,MAAM,uBAElB,IAAKkF,GAAYzG,OACf,MAAM,IAAIuB,MAAM,2BAElB,MAAMqH,EAAMnC,EAAWzG,OACvB,IAAIE,EACJ,IAAKA,EAAI,EAAGA,EAAI0I,EAAK1I,IAAK,CACxB,IAAI0B,EAMJ,GAJEA,EAD2B,iBAAlB6E,EAAWvG,GACRqC,EAAmBkE,EAAWvG,IAE9BuG,EAAWvG,IAEpB0B,EACH,MAAM,IAAIL,MAAM,aAAakF,EAAWvG,0BAE1C,IAAKqD,EAAOO,aAAalC,GAAY,CACnC,MAAMiH,EAAoBtF,EAAOM,eACjCN,EAAOE,aAAa7B,GACpBqE,EAAgB1C,EAAQsF,IAG5B,OAAOtF,GA+FT,OAHAoF,sBAAsBJ,EAAaC,GACnC7B,IAEO9H,OAAOC,OAAO,CACnByE,OAAQgF,EACR5F,cAAAA,EACA2C,YAAAA,EACA+C,WAAAA,EACAzF,aAAAA,EACAwD,cAAAA,EACAuC,sBAAAA,sBACAG,2BApGiC,CAACvF,KAAmBkD,KACrD,IAAKlD,EACH,MAAM,IAAIhC,MAAM,uBAElB,IAAKkF,GAAYzG,OACf,MAAM,IAAIuB,MAAM,2BAElB,MAAMqH,EAAMnC,EAAWzG,OACvB,IAAIE,EACJ,IAAKA,EAAI,EAAGA,EAAI0I,EAAK1I,IAAK,CACxB,IAAI0B,EAMJ,GAJEA,EAD2B,iBAAlB6E,EAAWvG,GACRqC,EAAmBkE,EAAWvG,IAE9BuG,EAAWvG,IAEpB0B,EACH,MAAM,IAAIL,MAAM,aAAakF,EAAWvG,0BAE1C,GAAIqD,EAAOO,aAAalC,GAAY,CAClC,MAAMiH,EAAoBtF,EAAOM,eACjCN,EAAOc,gBAAgBzC,GACvBqE,EAAgB1C,EAAQsF,IAG5B,OAAOtF,GA4EPf,iBAAAA,EACAD,mBAAAA,EACAiE,wBAAAA,EACAD,cAAAA,EACAhB,kBAAAA,EACA6C,iBAAAA,EACAD,gBAAAA,EACA7F,sBAAAA,EACA4F,mBAAAA,EACAF,WAAAA,EACA1G,kBAAAA,EACA0F,eAAAA,EACA5E,oBAAAA,EACA0F,iBAAAA,EACAP,UAvFgB,KAKhB,MAAMwB,EAAUV,IAChB,IAAK,IAAInI,EAAI,EAAGA,EAAI6I,EAAQ/I,OAAQE,IAAK,CACvC,MAAMgH,EAAS6B,EAAQ7I,GACvB,IAAuB,IAAnBgH,EAAOQ,QACX,IAA6B,IAAzBd,IAA+B,CACjC,MAAMd,EAAWP,EAAkB2B,EAAOnB,UAAWmB,EAAOE,WAC5DsB,EAAgBxB,EAAO1F,MAAQsE,EAC/BoB,EAAOK,UAAUzB,EAAUoB,QAE3BA,EAAOK,UAAUmB,EAAgBxB,EAAO1F,MAAO0F,GAGlDL,KAuEDQ,OApEc2B,IAKd,MAAMD,EAAUV,IAChB,IAAK,IAAInI,EAAI,EAAGA,EAAI6I,EAAQ/I,OAAQE,IAAK,CACvC,MAAMgH,EAAS6B,EAAQ7I,GACvB,IAAuB,IAAnBgH,EAAOQ,QACX,IAA6B,IAAzBd,IAA+B,CACjC,MAAMd,EAAWP,EAAkB2B,EAAOnB,UAAWmB,EAAOE,WAC5DsB,EAAgBxB,EAAO1F,MAAQsE,EAC/BoB,EAAOG,OAAO2B,EAAIlD,EAAUoB,QAE5BA,EAAOG,OAAO2B,EAAIN,EAAgBxB,EAAO1F,MAAO0F,GAGpDL,KAoDAS,WAjDkB2B,IAKlB,MAAMF,EAAUV,IAChB,IAAK,IAAInI,EAAI,EAAGA,EAAI6I,EAAQ/I,OAAQE,IAAK,CACvC,MAAMgH,EAAS6B,EAAQ7I,GACvB,IAAuB,IAAnBgH,EAAOQ,QACX,IAA6B,IAAzBd,IAA+B,CACjC,MAAMd,EAAWP,EAAkB2B,EAAOnB,UAAWmB,EAAOE,WAC5DsB,EAAgBxB,EAAO1F,MAAQsE,EAC/BoB,EAAOI,WAAW2B,EAAKnD,EAAUoB,QAEjCA,EAAOI,WAAW2B,EAAKP,EAAgBxB,EAAO1F,MAAO0F,GAGzDL"}