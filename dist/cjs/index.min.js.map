{"version":3,"file":"index.min.js","sources":["../../src/utils/mask.ts","../../src/utils/utils.ts","../../src/component/component_manager.ts","../../src/component/component.ts","../../src/entity/entity.ts","../../src/entity/entity_pool.ts","../../src/entity/entity_manager.ts","../../src/system/system.ts","../../src/system/system_manager.ts","../../src/world.ts"],"sourcesContent":["// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nexport interface Mask {\n  clear: () => void;\n  has: (bit: bigint | number) => boolean;\n  isOn: (bit: bigint | number) => boolean;\n  off: (bit: bigint | number) => bigint;\n  on: (bit: bigint | number) => bigint;\n  set: (bit: bigint | number, value: boolean) => bigint;\n  toArray: () => number[];\n  toggle: (bit: bigint | number) => bigint;\n  toNumber: () => number;\n  toString: () => string;\n  value: () => bigint;\n}\n\n/**\n * Creates a bigint bitmask\n * @param n the initial mask - defaults to 0n\n */\nexport function createMask(n: bigint | number = 0n): Mask {\n  if (typeof n === 'number') n = BigInt(n);\n\n  // the actual bitmask value\n  let _mask = 1n << n;\n\n  /** @returns the mask's value */\n  const value = () => _mask;\n\n  /** Reset the bitmask */\n  const clear = (): bigint => _mask = 1n << 0n;\n\n  /**\n   * Check a bit in the mask\n   * @param bit the bit to test\n   */\n  const has = function(bit: bigint | number): boolean {\n    if (typeof bit === 'number') bit = BigInt(bit);\n    return ((_mask & bit) === _mask) ? true : false;\n  };\n\n  /**\n   * Set a bit in the mask to false/off\n   * @param bit the bit to set\n   */\n  const off = (bit: bigint | number): bigint => {\n    if (typeof bit === 'number') bit = BigInt(bit);\n    _mask &= ~(1n << bit);\n    return _mask;\n  };\n\n  /**\n   * Set a bit in the mask to true/on\n   * @param bit the bit to set\n   */\n  const on = (bit: bigint | number): bigint => {\n    if (typeof bit === 'number') bit = BigInt(bit);\n    _mask |= (1n << bit);\n    return _mask;\n  };\n\n  /**\n   * Set a bit in the mask to a give value\n   * @param bit the bit to set\n   * @param value the value - true / false\n   */\n  const set = (bit: bigint | number, value: boolean): bigint => {\n    if (value === true) {\n      return on(bit);\n    } else {\n      return off(bit);\n    }\n  };\n\n  /**\n   * Test if a bit in the mask is on/true\n   * @param bit\n   */\n  const isOn = (bit: bigint | number): boolean => {\n    if (typeof bit === 'number') bit = BigInt(bit);\n    return ((_mask & (1n << bit)) !== 0n) ? true : false;\n  };\n\n  /**\n   * Toggle a bit in the mask\n   * @param bit the bit to toggle\n   */\n  const toggle = (bit: bigint | number): bigint => {\n    if (typeof bit === 'number') bit = BigInt(bit);\n    _mask ^= (1n << bit);\n    return _mask;\n  };\n\n  /** Convert the mask to a binary string */\n  const toString = (): string => _mask.toString(2);\n\n  /**\n   * Convert the mask to a number\n   * N.B. converting a bigint to number may result in loss of precision\n   */\n  const toNumber = (): number => Number(_mask);\n\n  /** Convert the mask to an array of 0s and 1s */\n  const toArray = (): number[] => _mask.toString(2).split(\"\").map((n) => parseInt(n, 10));\n\n  return Object.freeze({\n    clear,\n    has,\n    isOn,\n    off,\n    on,\n    set,\n    toArray,\n    toggle,\n    toNumber,\n    toString,\n    value,\n  });\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component } from '../component/component';\nimport { createMask } from './mask';\n\nexport type DisallowedKeys =\n    \"constructor\" |\n    \"hasOwnProperty\" |\n    \"isPrototypeOf\" |\n    \"propertyIsEnumerable\" |\n    \"prototype\" |\n    \"toLocaleString\" |\n    \"toString\" |\n    \"valueOf\" |\n    \"__defineGetter__\" |\n    \"__defineSetter__\" |\n    \"__lookupGetter__\" |\n    \"__lookupGetter__\" |\n    \"__proto__\";\n\n// eslint-disable-next-line max-len\nexport type RestrictedObject<T extends unknown> = Pick<T, Exclude<keyof T, DisallowedKeys>>;\n\n/** @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign */\nexport function deepAssign<T>(target: T, ...sources: T[]): T {\n  const lSources = sources.length;\n  if (!sources || !lSources) return target;\n\n  const descriptors: Record<string | number | symbol, PropertyDescriptor> = {};\n\n  for (let i = 0; i < lSources; i++) {\n    const source = sources[i];\n    // keys\n    const keys = Object.keys(source);\n    const lKeys = keys.length;\n    for (let j = 0; j < lKeys; j++) {\n      const key = keys[j];\n      const descriptor = Object.getOwnPropertyDescriptor(source, key);\n      if (descriptor && descriptor.enumerable) {\n        descriptors[key] = descriptor;\n      }\n    }\n    // symbols\n    const symbols = Object.getOwnPropertySymbols(source);\n    for (let j = 0; j < symbols.length; j++) {\n      const symbol = symbols[j];\n      const descriptor = Object.getOwnPropertyDescriptor(source, symbol);\n      if (descriptor && descriptor.enumerable) {\n        descriptors[symbol as unknown as string] = descriptor;\n      }\n    }\n  }\n  Object.defineProperties(target, descriptors);\n  return target;\n}\n\nexport function componentsToArchetype<T>(...components: Component<T>[]): bigint {\n  const archetype = createMask();\n  components.forEach((component) => archetype.on(component.id));\n  return archetype.value();\n}\n\nexport function generateId(): string {\n  return Date.now().toString(36) + '_' + Math.random().toString(36).substr(2, 9);\n}\n\nexport function clearObject(obj: Record<string, unknown>): Record<string, unknown> {\n  Object.keys(obj).forEach((key) => delete obj[key]);\n  return obj;\n}\n\nexport function clearArray<T>(arr: Array<T>): Array<T> {\n  arr.length = 0;\n  return arr;\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component, ComponentSpec, createComponent } from './component';\n\nexport interface ComponentManagerSpec {\n  maxComponents: number,\n}\n\nexport interface ComponentManger {\n  getComponentById: (id: number) => Component<unknown> | undefined;\n  getComponentByName: (name: string) => Component<unknown> | undefined;\n  getComponents: () => Component<unknown>[];\n  isComponentRegistered: <T>(component: Component<T>) => boolean,\n  registerComponent: <T>(spec: ComponentSpec<T>) => Component<T>;\n  unregisterComponent: <T>(component: Component<T>) => ComponentSpec<T>;\n}\n\n/**\n * Creates a new component manager\n * @param spec the component manager specification object\n */\nexport function createComponentManager(spec: ComponentManagerSpec): ComponentManger {\n  const { maxComponents } = { ...spec };\n\n  /** Component registry by name */\n  const _registry: Record<string, Component<unknown>> = {};\n\n  /** Array of unused component ids */\n  const _freeIds: number[] = [];\n\n  /** Count of registered components */\n  let _count = 0;\n\n  // initialize _freeIds array\n  let _n = 0;\n  for (let i = maxComponents; i >= 0; i--) {\n    _freeIds[i] = _n++;\n  }\n\n  /**\n   * Create and register a component\n   * @param spec the component specification object\n   */\n  const registerComponent = <T>(spec: ComponentSpec<T>): Component<T> => {\n    if (_count >= maxComponents) throw new Error('maximum components reached!');\n    if (spec.name in _registry) throw new Error(`component with name \"${spec.name}\" already registered!`);\n    const id = _freeIds.pop();\n    if (id === undefined) throw new Error('no available ids!');\n    const component = createComponent({...spec, id});\n    _registry[component.name] = component;\n    _count++;\n    return component;\n  };\n\n  /**\n   * Unregister a component\n   * @param component the component to unregister\n   */\n  const unregisterComponent = <T>(component: Component<T>): ComponentSpec<T> => {\n    if (!(component.name in _registry)) throw new Error(`component \"${component.name}\" is not registered.`);\n    delete _registry[component.name];\n    _freeIds.unshift(component.id);\n    const spec = Object.create(component) as Partial<{ -readonly [P in keyof Component<T>]: Component<T>[P] }>;\n    delete spec.id;\n    _count--;\n    return spec as ComponentSpec<T>;\n  };\n\n  /**\n   * Find a component by its name\n   * @param name the component name to search for\n   */\n  const getComponentByName = (name: string): Component<unknown> | undefined => _registry[name];\n\n  /**\n   * Find a component by its id number\n   * @param id the component id to search for\n   */\n  const getComponentById = (id: number | bigint): Component<unknown> | undefined => {\n    if (typeof id === 'number') id = BigInt(id);\n    return Object.values(_registry).find((component) => component.id === id);\n  };\n\n  /** Returns an array of all registered components  */\n  const getComponents = (): Component<unknown>[] => Object.values(_registry);\n\n  /**\n   * Check if a component is registered\n   * @param component the component to check\n   */\n  const isComponentRegistered = <T>(component: Component<T>): boolean => (component.name in _registry);\n\n  return Object.freeze({\n    getComponentById,\n    getComponentByName,\n    getComponents,\n    isComponentRegistered,\n    registerComponent,\n    unregisterComponent,\n  });\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { deepAssign } from \"../utils/utils\";\n\nexport type InternalComponentSpec<T> = ComponentSpec<T> & { id: number };\n\nexport interface ComponentSpec<T> {\n  entityLimit?: number | null;\n  name: string;\n  properties: T;\n  removable?: boolean,\n}\n\nexport type Component<T> = Readonly<{\n  entityLimit: number | null;\n  id: number,\n  name: string;\n  properties: T;\n  removable: boolean,\n}>\n\n/**\n * Creates a new component\n * @param spec the component specification object\n */\nexport function createComponent<T>(spec: InternalComponentSpec<T>): Component<T> {\n  const {\n    entityLimit = null,\n    id,\n    name,\n    properties,\n    removable = true,\n  } = { ...spec };\n\n  // check all required data is present\n  if (!name || !properties || typeof properties !== 'object' || id == null) {\n    throw new Error('malformed component.');\n  }\n\n  // clone and seal properties object\n  deepAssign(properties, spec.properties);\n  Object.seal(properties);\n\n  return Object.freeze(\n    Object.create({}, {\n      entityLimit: {\n        value: entityLimit,\n        enumerable: true,\n      },\n      id: {\n        value: id,\n        enumerable: true,\n      },\n      name: {\n        value: name,\n        enumerable: true,\n      },\n      properties: {\n        value: properties,\n        enumerable: true,\n      },\n      removable: {\n        value: removable,\n        enumerable: true,\n      }\n    })\n  ) as Component<T>;\n}\n","\"use strict\";\n\nimport { Component } from '../component/component';\nimport { createMask } from '../utils/mask';\nimport { clearObject, deepAssign } from '../utils/utils';\n\nexport type Entity = Readonly<{\n  _: Record<string, unknown>;\n  addComponent: <T>(component: Component<T>) => boolean;\n  getArchetype: () => bigint;\n  hasComponent: <T>(component: Component<T>) => boolean;\n  id: string;\n  isAwake: () => boolean;\n  next: (next?: Entity | null) => Entity | null;\n  purge: () => void;\n  removeComponent: <T>(component: Component<T>) => boolean;\n  sleep: () => boolean;\n  wake: () => boolean;\n}>\n\n/** Creates an entity */\nexport function createEntity(): Entity {\n  /** The entity's archetype mask */\n  const _archetype = createMask();\n\n  /** A unique id for the entity */\n  const _id = `${Date.now().toString(36)}_${Math.random().toString(36).substr(2, 9)}`;\n\n  /** Container for the entity's component properties */\n  const _properties = {} as Record<string, unknown>;\n\n  /** The entity's status */\n  let _awake = true;\n\n  /** The next entity in the entity pool */\n  let _next: Entity | null = null;\n\n  /** The entity object */\n  const entity = Object.create({}, {\n    // shorthand accessor for the entity's component properties\n    _: {\n      value: _properties,\n      enumerable: true,\n    },\n    addComponent: {\n      value: <T>(component: Component<T>): boolean => {\n        /** @todo validation */\n        if (component.name in _properties) {\n          console.warn(`Entity \"${_id}\" already has component \"${component.name}\".`);\n          return false;\n        }\n        try {\n          _properties[component.name] = deepAssign({}, component.properties);\n          _archetype.on(component.id);\n        } catch (err) {\n          console.warn(`Error adding component \"${component.name}\" to entity \"${_id}\".`, err);\n          return false;\n        }\n        return true;\n      },\n    },\n    getArchetype: {\n      value: (): bigint => _archetype.value(),\n    },\n    hasComponent: {\n      value: <T>(component: Component<T> | string): boolean => {\n        return ((typeof component === \"string\") ? component in _properties : component.name in _properties) ?? false;\n      },\n    },\n    isAwake: {\n      value: (): boolean => _awake,\n    },\n    id: {\n      value: _id,\n      enumerable: true,\n    },\n    next: {\n      value: (next?: Entity | null): Entity | null => {\n        if (next !== undefined) {\n          _next = next;\n        }\n        return _next;\n      }\n    },\n    purge: {\n      value: (): void => {\n        clearObject(_properties);\n        _archetype.clear();\n      },\n    },\n    removeComponent: {\n      value: <T>(component: Component<T>): boolean => {\n        /** @todo validation */\n        if (!(component.name in _properties)) return false;\n        delete _properties[component.name];\n        _archetype.off(component.id);\n        return true;\n      },\n    },\n    sleep: {\n      value: (): boolean => _awake = false,\n    },\n    wake: {\n      value: (): boolean => _awake = true,\n    },\n  }) as Entity;\n\n  return Object.freeze(entity);\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { createEntity, Entity } from './entity';\n\nexport interface EntityPoolSpec {\n  initialPoolSize: number;\n  maxEntities: number;\n}\n\nexport interface EntityPool {\n  flush: () => void;\n  get: () => Entity | null;\n  release: (entity: Entity) => void;\n}\n\n/** Creates an entity object pool */\nexport function createPool(spec: EntityPoolSpec): EntityPool {\n  const { initialPoolSize, maxEntities } = { ...spec };\n\n  /** The pool itself */\n  const _pool: Entity[] = [];\n\n  /** The first available entity */\n  let _firstAvailable: Entity | null;\n\n  /** Creates a new entity object  */\n  const _create = (n = 1): void => {\n    for (let i = 0; i < n; i++) {\n      if (_pool.length >= maxEntities) {\n        throw new Error('The entity pool is full.');\n      }\n      const entity = createEntity();\n      entity.next(_firstAvailable);\n      _firstAvailable = entity;\n      _pool.push(entity);\n    }\n  };\n\n  /** Empty the pool */\n  const flush = (): void => {\n    _pool.length = 0;\n    _firstAvailable = null;\n    _create(initialPoolSize);\n  };\n\n  /** Get an entity from the pool */\n  const get = (): Entity | null => {\n    if (!_firstAvailable) _create(initialPoolSize * 0.25);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const entity = _firstAvailable!;\n    _firstAvailable = entity.next();\n    return entity;\n  };\n\n  /** Release an entity back into the pool */\n  const release = (entity: Entity): void => {\n    entity.purge();\n    entity.next(_firstAvailable);\n    _firstAvailable = entity;\n  };\n\n  // flush the pool before returning\n  flush();\n\n  return Object.freeze({\n    flush,\n    get,\n    release,\n  });\n}","\"use strict\";\n\nimport { Component } from '../component/component';\nimport { componentsToArchetype } from '../utils/utils';\nimport { Entity } from './entity';\nimport { createPool, EntityPool } from \"./entity_pool\";\n\nexport interface EntityManagerSpec {\n  initialPoolSize: number;\n  maxEntities: number;\n}\n\nexport interface EntityManager {\n  areArchetypesDirty: () => boolean;\n  cleanedArchetypes: () => boolean;\n  createEntity: () => Entity;\n  destroyEntity: (entity: Entity) => boolean;\n  getEntities: () => Entity[];\n  getEntitiesByComponents: (...components: Component<unknown>[]) => Entity[];\n  getEntitiesByMask: (mask: bigint, exact?: boolean) => [bigint[], Entity[]];\n  getEntitiesFromMasks: (masks: bigint[]) => Entity[];\n  getEntityById: (id: string) => Entity | undefined;\n  rebuildArchetypes: () => void;\n  updateArchetype: (entity: Entity, previous?: bigint) => Entity;\n}\n\nexport function createEntityManager(spec: EntityManagerSpec): EntityManager {\n  const { initialPoolSize, maxEntities } = { ...spec };\n\n  /** The entity object pool */\n  const _pool: EntityPool = createPool({initialPoolSize, maxEntities});\n\n  /** The entity registry indexed by entity id */\n  const _registry: Record<string, Entity> = {};\n\n  /**  */\n  const _archetypes: Map<bigint, Set<Entity>> = new Map() as Map<bigint, Set<Entity>>;\n\n  /**  */\n  let _dirty = true;\n\n  /** */\n  const createEntity = (): Entity => {\n    const entity = _pool.get();\n    if (!entity) throw new Error('no entities left!');\n    _registry[entity.id] = entity;\n    updateArchetype(entity);\n    return entity;\n  };\n\n  /**\n   *\n   * @param entity\n   */\n  const destroyEntity = (entity: Entity): boolean => {\n    const success = (entity.id in _registry);\n    if (success === true) {\n      delete _registry[entity.id];\n      const archetype = entity.getArchetype();\n      _archetypes.get(archetype)?.delete(entity);\n      if (_archetypes.get(archetype)?.size === 0) {\n        _archetypes.delete(archetype);\n        _dirty = true;\n      }\n      _pool.release(entity);\n    }\n    return success;\n  };\n\n  /**\n   *\n   * @param id\n   */\n  const getEntityById = (id: string): Entity | undefined => _registry[id];\n\n  /** */\n  const getEntities = (): Entity[] => Object.values(_registry);\n\n  /**\n   *\n   * @param components\n   */\n  const getEntitiesByComponents = (...components: Component<unknown>[]): Entity[] => {\n    const mask = componentsToArchetype(...components);\n    return getEntitiesByMask(mask)[1];\n  };\n\n  /**\n   *\n   * @param masks\n   */\n  const getEntitiesFromMasks = (masks: bigint[]): Entity[] => {\n    const entities = masks.reduce((arr, mask) => {\n      const e = _archetypes.get(mask) ?? [];\n      arr.push(...e);\n      return arr;\n    }, [] as Entity[]);\n    return [...entities];\n  };\n\n  /**\n   *\n   * @param mask\n   * @param exact\n   */\n  const getEntitiesByMask = (mask: bigint, exact = false): [bigint[], Entity[]] => {\n    if (exact) {\n      const entities = _archetypes.get(mask) ?? [];\n      return [[mask], [...entities]];\n    } else {\n      const _entities: Set<Entity> = new Set();\n      const _masks: Set<bigint> = new Set();\n      if (_dirty === true) {\n        _archetypes.forEach((entities, archetype) => {\n          if ((archetype & mask) === mask) {\n            entities.forEach((entity) => _entities.add(entity));\n          }\n        });\n      } else {\n        _archetypes.forEach((entities, archetype) => {\n          if ((archetype & mask) === mask) {\n            entities.forEach((entity) => _entities.add(entity));\n          }\n        });\n      }\n      return [[..._masks], [..._entities]];\n    }\n  };\n\n  /**\n   *\n   * @param entity\n   * @param previous\n   */\n  const updateArchetype = (entity: Entity, previous?: bigint): Entity => {\n    if (previous != undefined) {\n      _archetypes.get(previous)?.delete(entity);\n    }\n    const archetype = entity.getArchetype();\n    if (_archetypes.has(archetype)) {\n      _archetypes.get(archetype)?.add(entity);\n    } else {\n      _archetypes.set(archetype, new Set([entity]));\n      _dirty = true;\n    }\n    return entity;\n  };\n\n  /**  */\n  const rebuildArchetypes = (): void => {\n    _archetypes.clear();\n    const entities = getEntities();\n    for (let i = 0; i < entities.length; i++) {\n      updateArchetype(entities[i]);\n    }\n    _dirty = false;\n  };\n\n  /** */\n  const areArchetypesDirty = (): boolean => _dirty;\n\n  /** */\n  const cleanedArchetypes = (): boolean => _dirty = false;\n\n  return Object.freeze({\n    areArchetypesDirty,\n    cleanedArchetypes,\n    createEntity,\n    destroyEntity,\n    getEntities,\n    getEntitiesByComponents,\n    getEntitiesByMask,\n    getEntitiesFromMasks,\n    getEntityById,\n    rebuildArchetypes,\n    updateArchetype,\n  });\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component } from '../component/component';\nimport { Entity } from '../entity/entity';\nimport { createMask } from '../utils/mask';\n\nexport type System = Readonly<{\n  archetype: bigint;\n  disable: () => boolean;\n  enable: () => boolean;\n  enabled: boolean;\n  exclusive: boolean;\n  name: string;\n  postUpdate: (int: number, entities: Entity[], system: System) => void;\n  preUpdate: (entities: Entity[], system: System) => void;\n  update: (dt: number, entities: Entity[], system: System) => void;\n}>\n\nexport interface SystemSpec {\n  components: Component<unknown>[];\n  exclusive?: boolean;\n  name: string;\n  postUpdate?: (int: number, entity: Entity[], system: System) => void;\n  preUpdate?: (entities: Entity[], system: System) => void;\n  update?: (dt: number, entities: Entity[], system: System) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst _noop = function() {};\n\n/**\n * Creates a new system\n * @param spec the system specification object\n */\nexport function createSystem(spec: SystemSpec): System {\n  const {\n    components,\n    exclusive = false,\n    name,\n    postUpdate = _noop,\n    preUpdate = _noop,\n    update = _noop,\n  } = { ...spec };\n\n  // construct system archetype\n  const _archetype = components.reduce((archetype, component) => {\n    archetype.on(component.id);\n    return archetype;\n  }, createMask()).value();\n\n  // system status\n  let _enabled = false;\n\n  /** Enable the system */\n  const enable = (): boolean => _enabled = true;\n\n  /** Disable the system */\n  const disable = (): boolean => _enabled = false;\n\n  return Object.freeze({\n    get enabled(): boolean {\n      return _enabled;\n    },\n    archetype: _archetype,\n    disable,\n    enable,\n    exclusive,\n    name,\n    postUpdate,\n    preUpdate,\n    update,\n  });\n}","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { createSystem, System, SystemSpec } from './system';\n\nexport interface SystemManager {\n    getSystemByIndex: (index: number) => System | undefined;\n    getSystemByName: (name: string) => System | undefined;\n    getSystems: () => System[];\n    isSystemRegistered: (system: System) => boolean;\n    moveSystem: (system: System, index: number) => boolean;\n    registerSystem: (spec: SystemSpec, idx?: number | undefined) => System;\n    unregisterSystem: (system: System) => void;\n}\n\n/** Create a system manager */\nexport function createSystemManager(): SystemManager {\n  /** Container for all the systems indexed by system name */\n  const _registry: Record<string, System> = {};\n\n  /** Array of systems by execution order */\n  const _executionOrder: System[] = [];\n\n  /**\n   * Creates and registers a system\n   * @param spec the system specification\n   * @param idx the execution order, defaults to last in list\n   */\n  const registerSystem = (spec: SystemSpec, idx?: number): System => {\n    if (spec.name in _registry) {\n      throw new Error(`system \"${spec.name}\" is already registered!`);\n    }\n    const system = createSystem({...spec});\n    if (idx !== undefined) {\n      _executionOrder.splice(idx, 0, system);\n    } else {\n      _executionOrder.push(system);\n    }\n    _registry[system.name] = system;\n    return system;\n  };\n\n  /**\n   * Unregister a system\n   * @param system the system to unregister\n   */\n  const unregisterSystem = (system: System): void => {\n    if (!(system.name in _registry)) {\n      throw new Error(`system \"${system.name}\" is not registered!`);\n    }\n    delete _registry[system.name];\n    _executionOrder.splice(_executionOrder.indexOf(system), 1);\n  };\n\n  /**\n   * Move a system in the execution order\n   * @param system the system to move\n   * @param index the execution order of the system\n   */\n  const moveSystem = (system: System, index: number): boolean => {\n    const idx = _executionOrder.indexOf(system);\n    if (idx === -1) return false;\n    _executionOrder.splice(idx, 1);\n    _executionOrder.splice(index, 0, system);\n    return true;\n  };\n\n  /**\n   * Find a system by name\n   * @param name the system name to search for\n   */\n  const getSystemByName = (name: string): System | undefined => _registry[name];\n\n  /**\n   * Get system by execution order\n   * @param index the execution order\n   */\n  const getSystemByIndex = (index: number): System | undefined => _executionOrder[index] ?? undefined;\n\n  /** Returns an array of all systems in order of execution*/\n  const getSystems = (): System[] => [..._executionOrder];\n\n  /**\n   * Check if a system is registered\n   * @param system the system to check for\n   */\n  const isSystemRegistered = (system: System): boolean => system.name in _registry;\n\n  return Object.freeze({\n    getSystemByIndex,\n    getSystemByName,\n    getSystems,\n    isSystemRegistered,\n    moveSystem,\n    registerSystem,\n    unregisterSystem,\n  });\n}\n","// Copyright (c) 2021 P. Hughes. All rights reserved. MIT license.\n\"use strict\";\n\nimport { Component, ComponentSpec } from './component/component';\nimport { createComponentManager } from './component/component_manager';\nimport { Entity } from './entity/entity';\nimport { createEntityManager } from './entity/entity_manager';\nimport { System, SystemSpec } from './system/system';\nimport { createSystemManager } from './system/system_manager';\n\nexport interface WorldSpec {\n  initialPoolSize?: number;\n  maxComponents?: number;\n  maxEntities?: number;\n}\n\nexport type World = Readonly<{\n  addComponentsToEntity: (entity: Entity, ...components: Component<unknown>[]) => Entity;\n  createEntity: () => Entity;\n  destroyEntity: (entity: Entity) => boolean;\n  entity: Entity;\n  getComponentById: (id: number) => Component<unknown> | undefined;\n  getComponentByName: (name: string) => Component<unknown> | undefined;\n  getComponents: () => Component<unknown>[];\n  getEntities: () => Entity[];\n  getEntitiesByComponents: (...components: Component<unknown>[]) => Entity[];\n  getEntityById: (id: string) => Entity | undefined;\n  getSystemByIndex: (index: number) => System | undefined;\n  getSystemByName: (name: string) => System | undefined;\n  getSystems: () => System[];\n  isComponentRegistered: <T>(component: Component<T>) => boolean;\n  isSystemRegistered: (system: System) => boolean;\n  moveSystem: (system: System, idx: number) => boolean;\n  postUpdate: (int: number) => void;\n  preUpdate: () => void;\n  registerComponent: <T>(spec: ComponentSpec<T>) => Component<T>;\n  registerSystem: (spec: SystemSpec) => System;\n  removeComponentsFromEntity: (entity: Entity, ...components: Component<unknown>[]) => Entity;\n  unregisterComponent: <T>(component: Component<T>) => ComponentSpec<T>;\n  unregisterSystem: (system: System) => void;\n  update: (dt: number) => void;\n}>\n\nexport function createWorld(spec: WorldSpec): World {\n  // Spec\n  const {\n    initialPoolSize = 64,\n    maxComponents = 1024,\n    maxEntities = 100000,\n  } = { ...spec };\n\n  let _isFirstRun = false;\n\n  // Entity\n  const {\n    areArchetypesDirty,\n    cleanedArchetypes,\n    createEntity,\n    destroyEntity,\n    getEntities,\n    getEntitiesByComponents,\n    getEntitiesByMask,\n    getEntitiesFromMasks,\n    getEntityById,\n    rebuildArchetypes,\n    updateArchetype,\n  } = createEntityManager({\n    initialPoolSize,\n    maxEntities,\n  });\n\n  // Component\n  const {\n    getComponentById,\n    getComponentByName,\n    getComponents,\n    isComponentRegistered,\n    registerComponent,\n    unregisterComponent,\n  } = createComponentManager({\n    maxComponents,\n  });\n\n  // System\n  const {\n    getSystemByIndex,\n    getSystemByName,\n    getSystems,\n    isSystemRegistered,\n    moveSystem,\n    registerSystem,\n    unregisterSystem,\n  } = createSystemManager();\n\n  // world.entity Initialization\n  const worldEntity = createEntity();\n  const worldComponent = registerComponent<{ isWorld: boolean }>({\n    name: \"world\",\n    properties: {\n      isWorld: true,\n    },\n    entityLimit: 1,\n    removable: false,\n  });\n\n  const _systemMasks: Record<string, bigint[]> = {};\n\n  // Public methods\n  const addComponentsToEntity = (entity: Entity, ...components: (Component<unknown> | string)[]): Entity => {\n    if (!entity) {\n      throw new Error('no entity provided.');\n    }\n    if (!components?.length) {\n      throw new Error('no components provided.');\n    }\n    const len = components.length;\n    let i: number;\n    for (i = 0; i < len; i++) {\n      let component: Component<unknown> | undefined;\n      if (typeof components[i] === 'string') {\n        component = getComponentByName(components[i] as string);\n      } else {\n        component = components[i] as Component<unknown>;\n      }\n      if (!component) {\n        throw new Error(`component ${components[i] as string} is not registered!.`);\n      }\n      if (!entity.hasComponent(component)) {\n        const previousArchetype = entity.getArchetype();\n        entity.addComponent(component);\n        updateArchetype(entity, previousArchetype);\n      }\n    }\n    return entity;\n  };\n\n  const removeComponentsFromEntity = (entity: Entity, ...components: (Component<unknown> | string)[]): Entity => {\n    if (!entity) {\n      throw new Error('no entity provided.');\n    }\n    if (!components?.length) {\n      throw new Error('no components provided.');\n    }\n    const len = components.length;\n    let i: number;\n    for (i = 0; i < len; i++) {\n      let component: Component<unknown> | undefined;\n      if (typeof components[i] === 'string') {\n        component = getComponentByName(components[i] as string);\n      } else {\n        component = components[i] as Component<unknown>;\n      }\n      if (!component) {\n        throw new Error(`component ${components[i] as string}  is not registered.`);\n      }\n      if (entity.hasComponent(component)) {\n        const previousArchetype = entity.getArchetype();\n        entity.removeComponent(component);\n        updateArchetype(entity, previousArchetype);\n      }\n    }\n    return entity;\n  };\n\n  const preUpdate = (): void => {\n    if (_isFirstRun) {\n      rebuildArchetypes();\n      _isFirstRun = false;\n    }\n    const systems = getSystems();\n    for (let i = 0; i < systems.length; i++) {\n      const system = systems[i];\n      if (system.enabled === false) continue;\n      if (areArchetypesDirty() === true) {\n        const [masks, entities] = getEntitiesByMask(system.archetype, system.exclusive);\n        _systemMasks[system.name] = masks;\n        system.preUpdate(entities, system);\n      } else {\n        system.preUpdate(getEntitiesFromMasks(_systemMasks[system.name]), system);\n      }\n     }\n     cleanedArchetypes();\n  };\n\n  const update = (dt: number): void => {\n    if (_isFirstRun) {\n      rebuildArchetypes();\n      _isFirstRun = false;\n    }\n    const systems = getSystems();\n    for (let i = 0; i < systems.length; i++) {\n      const system = systems[i];\n      if (system.enabled === false) continue;\n      if (areArchetypesDirty() === true) {\n        const [masks, entities] = getEntitiesByMask(system.archetype, system.exclusive);\n        _systemMasks[system.name] = masks;\n        system.update(dt, entities, system);\n      } else {\n        system.update(dt, getEntitiesFromMasks(_systemMasks[system.name]), system);\n      }\n    }\n    cleanedArchetypes();\n  };\n\n  const postUpdate = (int: number): void => {\n    if (_isFirstRun) {\n      rebuildArchetypes();\n      _isFirstRun = false;\n    }\n    const systems = getSystems();\n    for (let i = 0; i < systems.length; i++) {\n      const system = systems[i];\n      if (system.enabled === false) continue;\n      if (areArchetypesDirty() === true) {\n        const [masks, entities] = getEntitiesByMask(system.archetype, system.exclusive);\n        _systemMasks[system.name] = masks;\n        system.postUpdate(int, entities, system);\n      } else {\n        system.postUpdate(int, getEntitiesFromMasks(_systemMasks[system.name]), system);\n      }\n    }\n    cleanedArchetypes();\n  };\n\n  // finalizations\n  addComponentsToEntity(worldEntity, worldComponent);\n\n  return Object.freeze({\n    addComponentsToEntity,\n    createEntity,\n    destroyEntity,\n    entity: worldEntity,\n    getComponentById,\n    getComponentByName,\n    getComponents,\n    getEntities,\n    getEntitiesByComponents,\n    getEntitiesByMask,\n    getEntityById,\n    getSystemByIndex,\n    getSystemByName,\n    getSystems,\n    isComponentRegistered,\n    isSystemRegistered,\n    moveSystem,\n    postUpdate,\n    preUpdate,\n    registerComponent,\n    registerSystem,\n    removeComponentsFromEntity,\n    unregisterComponent,\n    unregisterSystem,\n    update,\n  });\n}"],"names":["createMask","n","BigInt","_mask","off","bit","on","Object","freeze","clear","has","isOn","set","value","toArray","toString","split","map","parseInt","toggle","toNumber","Number","deepAssign","target","sources","lSources","length","descriptors","i","source","keys","lKeys","j","key","descriptor","getOwnPropertyDescriptor","enumerable","symbols","getOwnPropertySymbols","symbol","defineProperties","createComponentManager","spec","maxComponents","_registry","_freeIds","_count","_n","getComponentById","id","values","find","component","getComponentByName","name","getComponents","isComponentRegistered","registerComponent","Error","pop","undefined","createComponent","entityLimit","properties","removable","seal","create","unregisterComponent","unshift","createEntity","_archetype","_id","Date","now","Math","random","substr","_properties","_awake","_next","entity","_","addComponent","console","warn","err","getArchetype","hasComponent","isAwake","next","purge","clearObject","obj","forEach","removeComponent","sleep","wake","createPool","initialPoolSize","maxEntities","_pool","_firstAvailable","_create","push","flush","get","release","createEntityManager","_archetypes","Map","_dirty","getEntities","getEntitiesByMask","mask","exact","entities","_entities","Set","_masks","archetype","add","updateArchetype","previous","delete","areArchetypesDirty","cleanedArchetypes","destroyEntity","success","size","getEntitiesByComponents","components","componentsToArchetype","getEntitiesFromMasks","masks","reduce","arr","e","getEntityById","rebuildArchetypes","_noop","createSystemManager","_executionOrder","getSystemByIndex","index","getSystemByName","getSystems","isSystemRegistered","system","moveSystem","idx","indexOf","splice","registerSystem","createSystem","exclusive","postUpdate","preUpdate","update","_enabled","enabled","disable","enable","unregisterSystem","createWorld","worldEntity","worldComponent","isWorld","_systemMasks","addComponentsToEntity","len","previousArchetype","int","systems","removeComponentsFromEntity","dt"],"mappings":"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"}